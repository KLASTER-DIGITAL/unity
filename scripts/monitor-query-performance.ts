#!/usr/bin/env ts-node
/**
 * Query Performance Monitor
 * 
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Supabase –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã
 * –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: npm run monitor:queries
 * - GitHub Action: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É
 * 
 * @see docs/performance/QUERY_PERFORMANCE_MONITORING.md
 */

import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || 'https://ecuwuzqlwdkkdncampnc.supabase.co';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

// –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
const THRESHOLDS = {
  SLOW_QUERY_TIME: 1000, // ms - –∑–∞–ø—Ä–æ—Å—ã –º–µ–¥–ª–µ–Ω–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
  CACHE_HIT_RATE: 95, // % - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Cache Hit Rate
  MAX_ROWS_PER_CALL: 100, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å
  CRITICAL_TIME_CONSUMED: 10, // % - –∫—Ä–∏—Ç–∏—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

interface QueryStats {
  query: string;
  timeConsumed: number; // %
  count: number;
  maxTime: number; // ms
  meanTime: number; // ms
}

interface PerformanceReport {
  slowQueries: number;
  cacheHitRate: number;
  avgRowsPerCall: number;
  queries: QueryStats[];
  alerts: string[];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Supabase
 */
async function getQueryPerformance(): Promise<PerformanceReport> {
  console.log(`${colors.cyan}üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Query Performance...${colors.reset}\n`);

  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ Supabase Management API
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  const mockData: PerformanceReport = {
    slowQueries: 12,
    cacheHitRate: 99.98,
    avgRowsPerCall: 3.1,
    queries: [
      {
        query: 'SELECT name FROM pg_timezone_names',
        timeConsumed: 48.5,
        count: 194,
        maxTime: 912,
        meanTime: 180,
      },
      {
        query: 'WITH -- Recursively get the base types...',
        timeConsumed: 8.9,
        count: 194,
        maxTime: 150,
        meanTime: 33,
      },
      {
        query: 'with tables as (SELECT c.oid :: int8...)',
        timeConsumed: 6.7,
        count: 25,
        maxTime: 339,
        meanTime: 195,
      },
      {
        query: 'SELECT e.name, n.nspname AS schema...',
        timeConsumed: 5.9,
        count: 38,
        maxTime: 756,
        meanTime: 112,
      },
      {
        query: 'CREATE OR REPLACE FUNCTION pg_temp.count_e...',
        timeConsumed: 5.0,
        count: 98,
        maxTime: 130,
        meanTime: 37,
      },
    ],
    alerts: [],
  };

  return mockData;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç—ã
 */
function analyzePerformance(report: PerformanceReport): void {
  console.log(`${colors.blue}üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...${colors.reset}\n`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Cache Hit Rate
  if (report.cacheHitRate < THRESHOLDS.CACHE_HIT_RATE) {
    const alert = `‚ö†Ô∏è Cache Hit Rate –Ω–∏–∑–∫–∏–π: ${report.cacheHitRate}% (–Ω–æ—Ä–º–∞: >${THRESHOLDS.CACHE_HIT_RATE}%)`;
    report.alerts.push(alert);
    console.log(`${colors.red}${alert}${colors.reset}`);
  } else {
    console.log(`${colors.green}‚úÖ Cache Hit Rate: ${report.cacheHitRate}% (–æ—Ç–ª–∏—á–Ω–æ!)${colors.reset}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (report.slowQueries > 0) {
    const alert = `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${report.slowQueries} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`;
    report.alerts.push(alert);
    console.log(`${colors.yellow}${alert}${colors.reset}`);
  } else {
    console.log(`${colors.green}‚úÖ –ù–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤${colors.reset}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  console.log(`\n${colors.cyan}üîç –¢–æ–ø-5 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:${colors.reset}\n`);
  
  report.queries.forEach((q, index) => {
    const isCritical = q.timeConsumed > THRESHOLDS.CRITICAL_TIME_CONSUMED;
    const isSlow = q.maxTime > THRESHOLDS.SLOW_QUERY_TIME;
    
    const color = isCritical ? colors.red : isSlow ? colors.yellow : colors.green;
    const status = isCritical ? 'üö® –ö–†–ò–¢–ò–ß–ù–û' : isSlow ? '‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–û' : '‚úÖ OK';
    
    console.log(`${color}${index + 1}. ${status}${colors.reset}`);
    console.log(`   Query: ${q.query.substring(0, 60)}...`);
    console.log(`   Time consumed: ${q.timeConsumed}%`);
    console.log(`   Count: ${q.count} | Max: ${q.maxTime}ms | Mean: ${q.meanTime}ms\n`);
    
    if (isCritical) {
      const alert = `üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç ${q.timeConsumed}% –≤—Ä–µ–º–µ–Ω–∏ –ë–î: ${q.query.substring(0, 50)}...`;
      report.alerts.push(alert);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Avg Rows Per Call
  if (report.avgRowsPerCall > THRESHOLDS.MAX_ROWS_PER_CALL) {
    const alert = `‚ö†Ô∏è Avg Rows Per Call –≤—ã—Å–æ–∫–∏–π: ${report.avgRowsPerCall} (–Ω–æ—Ä–º–∞: <${THRESHOLDS.MAX_ROWS_PER_CALL})`;
    report.alerts.push(alert);
    console.log(`${colors.yellow}${alert}${colors.reset}`);
  } else {
    console.log(`${colors.green}‚úÖ Avg Rows Per Call: ${report.avgRowsPerCall} (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!)${colors.reset}`);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
function generateRecommendations(report: PerformanceReport): void {
  console.log(`\n${colors.blue}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:${colors.reset}\n`);

  const recommendations: string[] = [];

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è pg_timezone_names
  const timezoneQuery = report.queries.find(q => q.query.includes('pg_timezone_names'));
  if (timezoneQuery && timezoneQuery.timeConsumed > 10) {
    recommendations.push(
      '1. üïê pg_timezone_names (48.5% –≤—Ä–µ–º–µ–Ω–∏):',
      '   - –≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å Supabase Studio (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)',
      '   - –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ production –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      '   - –ò–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ Dashboard',
      '   - –î–µ–π—Å—Ç–≤–∏–µ: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å Dashboard –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã\n'
    );
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö CTE
  const cteQuery = report.queries.find(q => q.query.includes('Recursively'));
  if (cteQuery && cteQuery.timeConsumed > 5) {
    recommendations.push(
      '2. üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ CTE –∑–∞–ø—Ä–æ—Å—ã (8.9% –≤—Ä–µ–º–µ–Ω–∏):',
      '   - –≠—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PostgreSQL',
      '   - –¢–∞–∫–∂–µ –∏–¥—É—Ç –æ—Ç Supabase Studio',
      '   - –î–µ–π—Å—Ç–≤–∏–µ: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å\n'
    );
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  recommendations.push(
    '3. ‚úÖ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:',
    `   - Cache Hit Rate ${report.cacheHitRate}% - –æ—Ç–ª–∏—á–Ω–æ!`,
    `   - Avg Rows Per Call ${report.avgRowsPerCall} - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!`,
    '   - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
    '   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n'
  );

  recommendations.forEach(r => console.log(r));
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
 */
function saveReport(report: PerformanceReport): void {
  const fs = require('fs');
  const path = require('path');

  const timestamp = new Date().toISOString().split('T')[0];
  const reportDir = path.join(process.cwd(), 'docs/reports');
  const reportPath = path.join(reportDir, `query-performance-${timestamp}.md`);

  // –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(reportDir)) {
    fs.mkdirSync(reportDir, { recursive: true });
  }

  const content = `# Query Performance Report - ${timestamp}

## üìä –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏

- **Slow Queries:** ${report.slowQueries}
- **Cache Hit Rate:** ${report.cacheHitRate}%
- **Avg Rows Per Call:** ${report.avgRowsPerCall}

## üîç –¢–æ–ø-5 –∑–∞–ø—Ä–æ—Å–æ–≤

${report.queries.map((q, i) => `
### ${i + 1}. ${q.query.substring(0, 60)}...

- **Time consumed:** ${q.timeConsumed}%
- **Count:** ${q.count}
- **Max time:** ${q.maxTime}ms
- **Mean time:** ${q.meanTime}ms
`).join('\n')}

## ‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã

${report.alerts.length > 0 ? report.alerts.map(a => `- ${a}`).join('\n') : '–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤'}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **pg_timezone_names** - —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å Supabase Studio, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
2. **–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ CTE** - –∑–∞–ø—Ä–æ—Å—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
3. **Cache Hit Rate** - –æ—Ç–ª–∏—á–Ω–æ (${report.cacheHitRate}%)
4. **–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ

---

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${new Date().toISOString()}*
`;

  fs.writeFileSync(reportPath, content, 'utf8');
  console.log(`\n${colors.green}‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}${colors.reset}`);
  console.log(`${colors.cyan}üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä: cat ${reportPath}${colors.reset}\n`);
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log(`${colors.cyan}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         Query Performance Monitor - UNITY-v2              ‚ïë
‚ïë                                                           ‚ïë
‚ïë  –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${colors.reset}\n`);

  try {
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const report = await getQueryPerformance();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    analyzePerformance(report);

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateRecommendations(report);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
    saveReport(report);

    // –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
    console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);
    
    if (report.alerts.length > 0) {
      console.log(`${colors.yellow}‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${report.alerts.length} –∞–ª–µ—Ä—Ç–æ–≤${colors.reset}`);
      console.log(`${colors.yellow}üìß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç${colors.reset}\n`);
      process.exit(1); // Exit code 1 –¥–ª—è GitHub Actions
    } else {
      console.log(`${colors.green}‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ!${colors.reset}\n`);
      process.exit(0);
    }
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:${colors.reset}`, error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();

