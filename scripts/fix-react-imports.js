#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ React –∏–º–ø–æ—Ä—Ç—ã...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions = ['.ts', '.tsx']) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!['node_modules', '.git', 'dist', 'build'].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      if (extensions.some(ext => file.endsWith(ext))) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
function fixReactImports(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  const patterns = [
    // import { React, ... } from "react";
    {
      regex: /import\s*{\s*React\s*,\s*([^}]+)\s*}\s*from\s*["']react["'];?/g,
      replacement: (match, namedImports) => `import React, { ${namedImports.trim()} } from "react";`
    },
    // import { React } from "react";
    {
      regex: /import\s*{\s*React\s*}\s*from\s*["']react["'];?/g,
      replacement: () => `import React from "react";`
    },
    // import { React, Component } from "react"; (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
    {
      regex: /import\s*{\s*React\s*,\s*Component\s*}\s*from\s*["']react["'];?/g,
      replacement: () => `import React, { Component } from "react";`
    }
  ];
  
  let newContent = content;
  let hasChanges = false;
  
  patterns.forEach(pattern => {
    if (pattern.regex.test(newContent)) {
      newContent = newContent.replace(pattern.regex, pattern.replacement);
      hasChanges = true;
    }
  });
  
  if (hasChanges) {
    fs.writeFileSync(filePath, newContent, 'utf8');
    return true;
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const startTime = Date.now();
  const srcDir = path.join(process.cwd(), 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('‚ùå –ü–∞–ø–∫–∞ src/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    process.exit(1);
  }
  
  const files = findFiles(srcDir);
  let processedCount = 0;
  
  files.forEach(filePath => {
    if (fixReactImports(filePath)) {
      processedCount++;
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(process.cwd(), filePath)}`);
    }
  });
  
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(2);
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedCount}`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`);
}

main();
