name: Lighthouse CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_APP_VERSION: ${{ github.sha }}

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const resultsPath = '.lighthouseci';
            
            // Read Lighthouse results
            let comment = '## 🔦 Lighthouse CI Results\n\n';
            
            try {
              const manifestPath = `${resultsPath}/manifest.json`;
              if (fs.existsSync(manifestPath)) {
                const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
                
                comment += '### Performance Scores\n\n';
                comment += '| URL | Performance | Accessibility | Best Practices | SEO | PWA |\n';
                comment += '|-----|-------------|---------------|----------------|-----|-----|\n';
                
                for (const result of manifest) {
                  const report = JSON.parse(fs.readFileSync(result.jsonPath, 'utf8'));
                  const categories = report.categories;
                  
                  const formatScore = (score) => {
                    const percentage = Math.round(score * 100);
                    const emoji = percentage >= 90 ? '🟢' : percentage >= 50 ? '🟡' : '🔴';
                    return `${emoji} ${percentage}`;
                  };
                  
                  comment += `| ${result.url} | `;
                  comment += `${formatScore(categories.performance.score)} | `;
                  comment += `${formatScore(categories.accessibility.score)} | `;
                  comment += `${formatScore(categories['best-practices'].score)} | `;
                  comment += `${formatScore(categories.seo.score)} | `;
                  comment += `${formatScore(categories.pwa.score)} |\n`;
                }
                
                comment += '\n### Core Web Vitals\n\n';
                comment += '| Metric | Value | Status |\n';
                comment += '|--------|-------|--------|\n';
                
                const firstResult = manifest[0];
                const report = JSON.parse(fs.readFileSync(firstResult.jsonPath, 'utf8'));
                const audits = report.audits;
                
                const formatMetric = (value, good, poor) => {
                  const emoji = value <= good ? '✅' : value <= poor ? '⚠️' : '❌';
                  return `${emoji} ${value}ms`;
                };
                
                comment += `| FCP | ${formatMetric(audits['first-contentful-paint'].numericValue, 1800, 3000)} |\n`;
                comment += `| LCP | ${formatMetric(audits['largest-contentful-paint'].numericValue, 2500, 4000)} |\n`;
                comment += `| TBT | ${formatMetric(audits['total-blocking-time'].numericValue, 200, 600)} |\n`;
                comment += `| CLS | ${audits['cumulative-layout-shift'].numericValue.toFixed(3)} | ${audits['cumulative-layout-shift'].numericValue <= 0.1 ? '✅' : audits['cumulative-layout-shift'].numericValue <= 0.25 ? '⚠️' : '❌'} |\n`;
                comment += `| SI | ${formatMetric(audits['speed-index'].numericValue, 3400, 5800)} |\n`;
                
                comment += '\n### Resource Summary\n\n';
                comment += '| Resource Type | Size | Count |\n';
                comment += '|---------------|------|-------|\n';
                
                const resourceSummary = audits['resource-summary'].details.items;
                for (const item of resourceSummary) {
                  const sizeMB = (item.transferSize / 1024 / 1024).toFixed(2);
                  comment += `| ${item.resourceType} | ${sizeMB} MB | ${item.requestCount} |\n`;
                }
                
                comment += '\n---\n';
                comment += `📊 [View full Lighthouse report](${manifest[0].summary.reportUrl})\n`;
              }
            } catch (error) {
              comment += `\n⚠️ Error reading Lighthouse results: ${error.message}\n`;
            }
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check performance budget
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking performance budgets..."
          
          # This will fail the workflow if budgets are exceeded
          # The actual check is done by Lighthouse CI assertions in lighthouserc.json
          
          if [ -f ".lighthouseci/manifest.json" ]; then
            echo "✅ Lighthouse CI completed successfully"
          else
            echo "❌ Lighthouse CI failed"
            exit 1
          fi

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

