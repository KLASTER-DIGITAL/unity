import { useState, useRef, useEffect } from "react";
import { motion, useMotionValue, useTransform, AnimatePresence } from "motion/react";
import { AchievementHeader } from "../AchievementHeader";
import { ChatInputSection } from "../ChatInputSection";
import { getEntries, getUserStats, type DiaryEntry } from "../../utils/api";
import { toast } from "sonner";
import { 
  Undo2,
  Heart
} from "lucide-react";

interface DiaryData {
  name: string;
  emoji: string;
}

interface AchievementHomeScreenProps {
  diaryData?: DiaryData;
  firstEntry?: string;
  userData?: any;
}

interface AchievementCard {
  id: string;
  date: string;
  title: string;
  description: string;
  gradient: string;
  isMarked: boolean;
  category?: string;
  sentiment?: string;
}

// –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç sentiment
const GRADIENTS = {
  positive: [
    "from-[#FE7669] to-[#ff8969]",
    "from-[#ff7769] to-[#ff6b9d]",
    "from-[#ff6b9d] to-[#c471ed]",
    "from-[#c471ed] to-[#8B78FF]"
  ],
  neutral: [
    "from-[#92BFFF] to-[#6BA3FF]",
    "from-[#6BA3FF] to-[#5B93EF]"
  ],
  negative: [
    "from-[#FFB74D] to-[#FFA726]",
    "from-[#FFA726] to-[#FF9800]"
  ]
};

// –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const STARTER_CARDS: AchievementCard[] = [
  {
    id: "starter_1",
    date: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
    title: "–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è",
    description: "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –æ —Å–≤–æ—ë–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏–ª–∏ –≥–æ—Ä–¥—ã–º —Å–æ–±–æ–π!",
    gradient: "from-[#FE7669] to-[#ff8969]",
    isMarked: false
  },
  {
    id: "starter_2",
    date: "–°–æ–≤–µ—Ç –¥–Ω—è", 
    title: "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ ‚Äî –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º",
    description: "–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ. –î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –ø—Ä–∏–∑–Ω–∞–Ω–∏—è. –ù–∞—á–Ω–∏ —Å —á–µ–≥–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ!",
    gradient: "from-[#ff6b9d] to-[#c471ed]",
    isMarked: false
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DiaryEntry –≤ AchievementCard
function entryToCard(entry: DiaryEntry, index: number): AchievementCard {
  const gradientList = GRADIENTS[entry.sentiment] || GRADIENTS.positive;
  const gradient = gradientList[index % gradientList.length];
  
  const entryDate = new Date(entry.createdAt);
  const dateFormatter = new Intl.DateTimeFormat('ru', { 
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });
  
  return {
    id: entry.id,
    date: dateFormatter.format(entryDate),
    title: entry.category || "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
    description: entry.text,
    gradient,
    isMarked: false,
    category: entry.category,
    sentiment: entry.sentiment
  };
}

// –°–≤–∞–π–ø-–∫–∞—Ä—Ç–æ—á–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
function SwipeCard({ 
  card, 
  index, 
  totalCards, 
  onSwipe, 
  isTop
}: { 
  card: AchievementCard; 
  index: number;
  totalCards: number;
  onSwipe: (direction: 'left' | 'right') => void;
  isTop: boolean;
}) {
  const x = useMotionValue(0);
  const y = useMotionValue(0);
  const rotate = useTransform(x, [-300, 0, 300], [-25, 0, 25]);
  const opacity = useTransform(x, [-200, -100, 0, 100, 200], [0.5, 1, 1, 1, 0.5]);
  
  // Overlay –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ feedback –ø—Ä–∏ —Å–≤–∞–π–ø–µ (—Ç–æ–ª—å–∫–æ –ª–∞–π–∫)
  const likeOpacity = useTransform(x, [0, 100], [0, 1]);

  const cardRef = useRef<HTMLDivElement>(null);

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å—Ç–µ–∫–µ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å)
  const getStackStyle = () => {
    switch(index) {
      case 0: // –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–Ω–∞
        return {
          scale: 1,
          y: 0,
          rotate: 0,
          opacity: 1,
          blur: 0,
          zIndex: 40
        };
      case 1: // –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞ —Å–∑–∞–¥–∏
        return {
          scale: 0.96,
          y: -16,
          rotate: -3,
          opacity: 0.95,
          blur: 1,
          zIndex: 30
        };
      case 2: // –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –≤–∏–¥–Ω–∞ –∑–∞ –≤—Ç–æ—Ä–æ–π
        return {
          scale: 0.92,
          y: -32,
          rotate: 3,
          opacity: 0.85,
          blur: 2,
          zIndex: 20
        };
      default: // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —Å–ª–µ–≥–∫–∞ –≤–∏–¥–Ω—ã
        return {
          scale: 0.88,
          y: -48,
          rotate: 0,
          opacity: 0.7,
          blur: 3,
          zIndex: 10
        };
    }
  };

  const stackStyle = getStackStyle();

  const handleDragEnd = (event: any, info: any) => {
    const offset = info.offset.x;
    const velocity = info.velocity.x;

    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–π –∏–ª–∏ –¥–∞–ª–µ–∫–∏–π
    if (Math.abs(velocity) > 500 || Math.abs(offset) > 100) {
      // Haptic feedback
      if (navigator.vibrate) {
        navigator.vibrate(50);
      }
      
      onSwipe(offset > 0 ? 'right' : 'left');
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ
      x.set(0);
      y.set(0);
    }
  };

  return (
    <motion.div
      ref={cardRef}
      drag={isTop}
      dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
      dragElastic={0.7}
      onDragEnd={handleDragEnd}
      style={{
        x: isTop ? x : 0,
        y: isTop ? y : stackStyle.y,
        rotate: isTop ? rotate : stackStyle.rotate,
        scale: isTop ? opacity.get() > 0.8 ? stackStyle.scale : useTransform(opacity, [0.5, 1], [0.9, stackStyle.scale]) : stackStyle.scale,
        zIndex: stackStyle.zIndex,
      }}
      initial={{ 
        scale: stackStyle.scale,
        y: stackStyle.y,
        rotate: stackStyle.rotate,
        opacity: stackStyle.opacity
      }}
      animate={{ 
        scale: stackStyle.scale,
        y: stackStyle.y,
        rotate: stackStyle.rotate,
        opacity: stackStyle.opacity,
        filter: `blur(${stackStyle.blur}px)`,
        transition: { duration: 0.3, ease: "easeOut" }
      }}
      exit={{
        x: x.get() > 0 ? 400 : -400,
        opacity: 0,
        rotate: x.get() > 0 ? 30 : -30,
        transition: { duration: 0.3, ease: "easeIn" }
      }}
      className="absolute w-full cursor-grab active:cursor-grabbing"
      whileTap={{ cursor: "grabbing", scale: isTop ? 1.02 : stackStyle.scale }}
    >
      <div 
        className={`bg-gradient-to-br ${card.gradient} rounded-[36px] shadow-2xl overflow-hidden backdrop-blur-[32.5px] relative`}
        style={{
          boxShadow: index === 0 ? '0 20px 60px rgba(0,0,0,0.3)' : '0 10px 30px rgba(0,0,0,0.2)'
        }}
      >
        {/* Like overlay - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–≤–∞–π–ø–µ –≤–ø—Ä–∞–≤–æ */}
        {isTop && (
          <motion.div
            style={{ opacity: likeOpacity }}
            className="absolute inset-0 bg-gradient-to-r from-transparent via-green-500/20 to-green-500/40 pointer-events-none z-10 flex items-center justify-center"
          >
            <div className="bg-green-500 text-white px-8 py-4 rounded-2xl rotate-12 border-4 border-white shadow-xl">
              <Heart className="w-12 h-12" fill="currentColor" />
            </div>
          </motion.div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="p-8 py-10 relative z-0">
          {/* Date */}
          <motion.div 
            className="text-white/90 mb-6"
            animate={{ opacity: 0.9 }}
          >
            <p className="!text-[12px] !font-normal">{card.date}</p>
          </motion.div>
          
          {/* Title */}
          <motion.div className="mb-4">
            <h3 className="text-white !text-[24px] !font-semibold tracking-[-0.5px] leading-tight">
              {card.title}
            </h3>
          </motion.div>
          
          {/* Description */}
          <motion.div className="mb-2">
            <p className="text-white !text-[16px] !font-normal leading-[24px] opacity-95">
              {card.description}
            </p>
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export function AchievementHomeScreen({ 
  diaryData = { name: "–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", emoji: "üèÜ" }, 
  firstEntry, 
  userData 
}: AchievementHomeScreenProps) {
  const [cards, setCards] = useState<AchievementCard[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showUndo, setShowUndo] = useState(false);
  const [lastRemovedCard, setLastRemovedCard] = useState<AchievementCard | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [currentStreak, setCurrentStreak] = useState(0);
  const [isFirstLoad, setIsFirstLoad] = useState(true);
  const undoTimeoutRef = useRef<NodeJS.Timeout>();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  const currentDate = new Date();
  const dateFormatter = new Intl.DateTimeFormat('ru', { 
    weekday: 'long', 
    day: 'numeric',
    month: 'long'
  });
  const formattedDate = dateFormatter.format(currentDate);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadEntriesAndStats();
  }, []);

  const loadEntriesAndStats = async () => {
    try {
      setIsLoading(true);
      const userId = userData?.id || "anonymous";

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [entries, stats] = await Promise.all([
        getEntries(userId, 20),
        getUserStats(userId)
      ]);

      console.log("Loaded entries:", entries);
      console.log("User stats:", stats);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∏
      if (entries.length > 0) {
        const loadedCards = entries.map((entry, index) => entryToCard(entry, index));
        setCards(loadedCards);
        setCurrentIndex(0); // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (isFirstLoad && !userData?.id) {
          setCards(STARTER_CARDS);
          setCurrentIndex(0);
        } else {
          // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setCards([]);
          setCurrentIndex(0);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      setCurrentStreak(stats.currentStreak);

    } catch (error) {
      console.error("Error loading entries:", error);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏", {
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
      });
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (isFirstLoad && !userData?.id) {
        setCards(STARTER_CARDS);
      }
    } finally {
      setIsLoading(false);
      setIsFirstLoad(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const handleNewEntry = (entry: DiaryEntry) => {
    console.log("New entry created:", entry);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ
    const newCard = entryToCard(entry, 0);
    setCards(prev => [newCard, ...prev]);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å (–∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –±—ã–ª–æ), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    if (cards.length === 0) {
      setCurrentIndex(0);
    }
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ–ª—å–∫–æ stats)
    const userId = userData?.id || "anonymous";
    getUserStats(userId).then(stats => {
      setCurrentStreak(stats.currentStreak);
    }).catch(err => {
      console.error("Error updating stats:", err);
    });
    
    toast.success("–û—Ç–ª–∏—á–Ω–æ! üéâ", {
      description: "–¢–≤–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
    });
  };

  const handleSwipe = (direction: 'left' | 'right') => {
    const currentCard = cards[currentIndex];
    
    if (direction === 'right') {
      // Mark as loved
      setLastRemovedCard(currentCard);
      setShowUndo(true);
      
      // Haptic feedback
      if (navigator.vibrate) {
        navigator.vibrate([50, 100, 50]);
      }

      // Auto-hide undo after 5 seconds
      if (undoTimeoutRef.current) {
        clearTimeout(undoTimeoutRef.current);
      }
      undoTimeoutRef.current = setTimeout(() => {
        setShowUndo(false);
        setLastRemovedCard(null);
      }, 5000);
    }

    // Move to next card
    setCurrentIndex(prev => prev + 1);
  };

  const handleUndo = () => {
    if (lastRemovedCard) {
      setCurrentIndex(prev => prev - 1);
      setShowUndo(false);
      setLastRemovedCard(null);
      
      if (undoTimeoutRef.current) {
        clearTimeout(undoTimeoutRef.current);
      }
    }
  };

  const visibleCards = cards.slice(currentIndex, currentIndex + 4);
  const hasCards = currentIndex < cards.length;

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userData –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
  const userName = userData?.name || "–ê–Ω–Ω–∞";
  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º streak)
  const daysInApp = currentStreak > 0 ? currentStreak : 1;

  return (
    <div className="min-h-screen bg-background pb-20 overflow-x-hidden scrollbar-hide">
      {/* Achievement Header */}
      <AchievementHeader userName={userName} daysInApp={daysInApp} />

      {/* Loading State */}
      {isLoading && (
        <div className="px-6 pt-8 pb-6 flex items-center justify-center">
          <div className="flex flex-col items-center gap-3">
            <div className="w-12 h-12 border-4 border-accent border-t-transparent rounded-full animate-spin" />
            <p className="!text-[14px] text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...</p>
          </div>
        </div>
      )}

      {/* Swipe Cards Section */}
      {!isLoading && hasCards && (
        <div className="px-6 pt-5 pb-2">
          {/* Cards Stack Container */}
          <div className="relative w-full" style={{ height: '260px' }}>
            {/* Background blur effect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª—É–±–∏–Ω—ã */}
            <div className="absolute inset-0 bg-gradient-to-b from-transparent via-background/50 to-background pointer-events-none z-0" 
                 style={{ top: '20px' }} 
            />
            
            <AnimatePresence initial={false}>
              {visibleCards.reverse().map((card, idx) => {
                const actualIndex = visibleCards.length - 1 - idx;
                return (
                  <SwipeCard
                    key={card.id}
                    card={card}
                    index={actualIndex}
                    totalCards={visibleCards.length}
                    onSwipe={handleSwipe}
                    isTop={actualIndex === 0}
                  />
                );
              })}
            </AnimatePresence>
          </div>
        </div>
      )}

      {!isLoading && !hasCards && (
        <div className="px-6 pt-0 pb-3">
          <div className="bg-card rounded-[var(--radius-xl)] p-5 border border-border text-center">
            <div className="w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-2">
              <span className="text-[24px]">üéâ</span>
            </div>
            <h3 className="text-foreground mb-1.5 !text-[16px]">–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!</h3>
            <p className="text-muted-foreground !text-[13px] leading-[1.4]">
              –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
            </p>
          </div>
        </div>
      )}

      {/* Chat Input Section - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π */}
      {!isLoading && (
        <ChatInputSection 
          userName={userName}
          userId={userData?.id || "anonymous"}
          onMessageSent={(message) => {
            console.log("New achievement message:", message);
          }}
          onEntrySaved={handleNewEntry}
        />
      )}
    </div>
  );
}
