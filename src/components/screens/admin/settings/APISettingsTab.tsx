"use client";

import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { QuickStats } from './api/QuickStats';
import { UsageBreakdown } from './api/UsageBreakdown';
import { UsageChart } from './api/UsageChart';
import { UserUsageTable } from './api/UserUsageTable';
import '../../../../styles/admin-design-system.css';

const apiUsageData = [
  { month: 'Jan', requests: 4000, tokens: 120000, cost: 12.50 },
  { month: 'Feb', requests: 3000, tokens: 90000, cost: 9.75 },
  { month: 'Mar', requests: 5000, tokens: 150000, cost: 15.25 },
  { month: 'Apr', requests: 4500, tokens: 135000, cost: 13.80 },
  { month: 'May', requests: 6000, tokens: 180000, cost: 18.50 },
  { month: 'Jun', requests: 5500, tokens: 165000, cost: 16.75 },
];

export const APISettingsTab: React.FC = () => {
  const [apiKey, setApiKey] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [isValid, setIsValid] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [usageStats, setUsageStats] = useState({
    requests: 1247,
    tokens: 45678,
    cost: 12.34
  });

  useEffect(() => {
    // Load saved API key
    const loadApiKey = async () => {
      try {
        const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
        if (!token) return;

        const response = await fetch('https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/make-server-9729c493/admin/settings/openai_api_key', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          if (data.setting?.value) {
            setApiKey(data.setting.value);
            setIsValid(true);
          }
        }
      } catch (error) {
        console.error('Error loading API key:', error);
      }
    };

    loadApiKey();
  }, []);

  const handleSave = async () => {
    if (!apiKey) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á');
      return;
    }

    setIsLoading(true);
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      if (!token) {
        toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      const response = await fetch('https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/make-server-9729c493/admin/settings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          key: 'openai_api_key',
          value: apiKey
        })
      });

      if (response.ok) {
        setIsValid(true);
        toast.success('API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üîë');
      } else {
        const errorData = await response.json().catch(() => ({}));
        toast.error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞');
      }
    } catch (error) {
      console.error('Error saving API key:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsLoading(false);
    }
  };

  const handleTest = async () => {
    if (!apiKey) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    setIsValidating(true);
    try {
      // Simple format validation
      if (apiKey.startsWith('sk-') && apiKey.length > 20) {
        setIsValid(true);
        toast.success('API –∫–ª—é—á –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ');
      } else {
        setIsValid(false);
        toast.error('API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤');
      }
    } catch (error) {
      setIsValid(false);
      console.error('Error testing API key:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞');
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className="admin-space-y-10">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ */}
      <header className="admin-flex admin-items-center admin-gap-4 admin-pb-4 admin-border-b admin-border-gray-200">
        <div className="admin-p-3 admin-bg-admin-primary-lighter admin-rounded-lg admin-text-2xl" aria-hidden="true">
          üîë
        </div>
        <div>
          <h2 className="admin-text-2xl admin-font-semibold admin-text-gray-900">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API
          </h2>
          <p className="admin-text-sm admin-text-gray-600 admin-mt-1">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–æ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          </p>
        </div>
        <div className="admin-ml-auto admin-flex admin-gap-2">
          <div className={`admin-px-3 admin-py-1 admin-rounded-full admin-text-xs admin-font-medium ${isValid ? 'admin-bg-admin-success-lighter admin-text-admin-success' : 'admin-bg-admin-error-lighter admin-text-admin-error'}`}>
            {isValid ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          </div>
          <div className="admin-px-3 admin-py-1 admin-bg-admin-primary-lighter admin-text-admin-primary admin-rounded-full admin-text-xs admin-font-medium">
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π
          </div>
        </div>
      </header>

      <div className="admin-grid admin-grid-cols-1 lg:admin-grid-cols-3 admin-gap-8">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
        <div className="lg:admin-col-span-2">
          <div className="admin-card">
            <div className="admin-card-header">
              <h3 className="admin-card-title admin-flex admin-items-center admin-gap-2">
                üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
              </h3>
              <p className="admin-card-description">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OpenAI API –∫–ª—é—á–æ–º
              </p>
            </div>
            <div className="admin-card-content admin-space-y-8">
              {/* –ü–æ–ª–µ –¥–ª—è API –∫–ª—é—á–∞ */}
              <div className="admin-space-y-4">
                <label htmlFor="api-key" className="admin-font-medium admin-text-gray-900">
                  API –ö–ª—é—á
                </label>
                <div className="admin-flex admin-gap-3">
                  <input
                    id="api-key"
                    type="password"
                    placeholder="sk-..."
                    value={apiKey}
                    onChange={(e) => setApiKey(e.target.value)}
                    className="admin-input admin-flex-1"
                    aria-describedby="api-key-help"
                  />
                  <button
                    onClick={handleTest}
                    disabled={!apiKey || isValidating}
                    className="admin-btn admin-btn-primary"
                    title="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞"
                    aria-label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á"
                  >
                    {isValidating ? (
                      <div className="admin-flex admin-items-center admin-gap-2">
                        <div className="admin-spinner" />
                        –¢–µ—Å—Ç–∏—Ä—É—é...
                      </div>
                    ) : (
                      'üß™ –¢–µ—Å—Ç'
                    )}
                  </button>
                </div>
                <p id="api-key-help" className="admin-text-xs admin-text-gray-500">
                  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.
                </p>
              </div>

              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <div className="admin-flex admin-items-center admin-gap-4 admin-p-4 admin-bg-admin-gray-50 admin-rounded-lg admin-border admin-border-gray-200">
                <div className="admin-switch">
                  <input
                    id="auto-refresh"
                    type="checkbox"
                    checked={autoRefresh}
                    onChange={(e) => setAutoRefresh(e.target.checked)}
                    className="admin-sr-only"
                  />
                  <div className="admin-switch-slider"></div>
                </div>
                <div>
                  <label htmlFor="auto-refresh" className="admin-font-medium admin-text-gray-900 admin-cursor-pointer">
                    –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                  </label>
                  <p className="admin-text-sm admin-text-gray-600">
                    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                  </p>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <div className="admin-flex admin-gap-4 admin-mt-8">
                <button
                  onClick={handleSave}
                  disabled={!apiKey || !isValid || isLoading}
                  className="admin-btn admin-btn-success admin-font-medium"
                >
                  {isLoading ? (
                    <div className="admin-flex admin-items-center admin-gap-2">
                      <div className="admin-spinner" />
                      –°–æ—Ö—Ä–∞–Ω—è—é...
                    </div>
                  ) : (
                    <>
                      <span className="mr-2">üíæ</span>
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ */}
        <div className="admin-space-y-6">
          <div className="admin-card">
            <div className="admin-card-content admin-p-6">
              <div className="admin-flex admin-items-center admin-justify-between admin-mb-4">
                <span className="admin-font-medium admin-text-gray-900">–°—Ç–∞—Ç—É—Å API</span>
                <div className={`admin-w-3 admin-h-3 admin-rounded-full ${isValid ? 'admin-bg-admin-success' : 'admin-bg-admin-error'}`} aria-hidden="true"></div>
              </div>
              <div className="admin-text-center">
                <div className={`admin-text-lg admin-font-semibold admin-mb-2 ${isValid ? 'admin-text-admin-success' : 'admin-text-admin-error'}`}>
                  {isValid ? '‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω' : '‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}
                </div>
                <p className="admin-text-sm admin-text-gray-600">
                  {isValid ? 'API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */}
      <QuickStats />

      {/* –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π */}
      <UsageBreakdown />

      {/* –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ */}
      <UsageChart />

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <UserUsageTable />
    </div>
  );
};