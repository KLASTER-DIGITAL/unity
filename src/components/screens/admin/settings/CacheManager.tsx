/**
 * Cache Manager Component
 * 
 * Admin panel component for managing Service Worker caches.
 * Shows cache statistics and provides controls for invalidation.
 */

import { useState, useEffect } from 'react';
import { RefreshCw, Trash2, Database, HardDrive } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  getAllCaches,
  clearCache,
  clearAllCaches,
  invalidateAPICache,
  formatCacheSize,
  getCacheStats,
  type CacheInfo
} from '@/shared/lib/cache/cacheManager';
import { toast } from 'sonner';

export function CacheManager() {
  const [caches, setCaches] = useState<CacheInfo[]>([]);
  const [stats, setStats] = useState({
    totalCaches: 0,
    totalEntries: 0,
    totalSize: 0
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isClearing, setIsClearing] = useState<string | null>(null);

  // Load cache stats
  const loadCacheStats = async () => {
    setIsLoading(true);
    try {
      const cacheStats = await getCacheStats();
      setCaches(cacheStats.caches);
      setStats({
        totalCaches: cacheStats.totalCaches,
        totalEntries: cacheStats.totalEntries,
        totalSize: cacheStats.totalSize
      });
    } catch (error) {
      console.error('[CacheManager] Failed to load cache stats:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadCacheStats();
  }, []);

  // Clear specific cache
  const handleClearCache = async (cacheName: string) => {
    setIsClearing(cacheName);
    try {
      const deleted = await clearCache(cacheName);
      if (deleted) {
        toast.success(`–ö—ç—à "${cacheName}" –æ—á–∏—â–µ–Ω`);
        await loadCacheStats();
      } else {
        toast.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à "${cacheName}"`);
      }
    } catch (error) {
      console.error('[CacheManager] Failed to clear cache:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
    } finally {
      setIsClearing(null);
    }
  };

  // Clear all caches
  const handleClearAllCaches = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –í–°–ï –∫—ç—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')) {
      return;
    }

    setIsClearing('all');
    try {
      const deletedCount = await clearAllCaches();
      toast.success(`–û—á–∏—â–µ–Ω–æ ${deletedCount} –∫—ç—à–µ–π`);
      await loadCacheStats();
    } catch (error) {
      console.error('[CacheManager] Failed to clear all caches:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π');
    } finally {
      setIsClearing(null);
    }
  };

  // Invalidate API cache
  const handleInvalidateAPICache = async () => {
    setIsClearing('api');
    try {
      const deleted = await invalidateAPICache();
      if (deleted) {
        toast.success('API –∫—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω');
        await loadCacheStats();
      } else {
        toast.info('API –∫—ç—à —É–∂–µ –ø—É—Å—Ç');
      }
    } catch (error) {
      console.error('[CacheManager] Failed to invalidate API cache:', error);
      toast.error('–û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫—ç—à–∞');
    } finally {
      setIsClearing(null);
    }
  };

  return (
    <div className="space-y-6">
      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Database className="w-4 h-4" />
              –í—Å–µ–≥–æ –∫—ç—à–µ–π
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalCaches}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <HardDrive className="w-4 h-4" />
              –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalEntries}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <HardDrive className="w-4 h-4" />
              –†–∞–∑–º–µ—Ä –∫—ç—à–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCacheSize(stats.totalSize)}</div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
          <CardDescription>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex flex-wrap gap-3">
            <Button
              onClick={loadCacheStats}
              disabled={isLoading}
              variant="outline"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            </Button>

            <Button
              onClick={handleInvalidateAPICache}
              disabled={isClearing === 'api'}
              variant="outline"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å API –∫—ç—à
            </Button>

            <Button
              onClick={handleClearAllCaches}
              disabled={isClearing === 'all'}
              variant="destructive"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏
            </Button>
          </div>

          <p className="text-sm text-muted-foreground">
            üí° <strong>Stale-While-Revalidate:</strong> API –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫—ç—à –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
            TTL: API 5 –º–∏–Ω, —Å—Ç–∞—Ç–∏–∫–∞ 24 —á–∞—Å–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 7 –¥–Ω–µ–π.
          </p>
        </CardContent>
      </Card>

      {/* Cache List */}
      <Card>
        <CardHeader>
          <CardTitle>–°–ø–∏—Å–æ–∫ –∫—ç—à–µ–π</CardTitle>
          <CardDescription>
            –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –∫—ç—à–µ
          </CardDescription>
        </CardHeader>
        <CardContent>
          {caches.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-12">
              <Database className="w-12 h-12 text-muted-foreground mb-4 opacity-50" />
              <h3 className="text-lg font-semibold mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—ç—à–µ–π</h3>
              <p className="text-sm text-muted-foreground text-center max-w-md mb-4">
                –ö—ç—à–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ PWA.
                Service Worker –Ω–∞—á–Ω—ë—Ç –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
              </p>
              <Button
                onClick={loadCacheStats}
                disabled={isLoading}
                variant="outline"
                size="sm"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>
          ) : (
            <div className="space-y-3">
              {caches.map((cache) => (
                <div
                  key={cache.name}
                  className="flex items-center justify-between p-4 border rounded-lg"
                >
                  <div className="flex-1">
                    <div className="font-medium">{cache.name}</div>
                    <div className="text-sm text-muted-foreground">
                      {cache.entries} –∑–∞–ø–∏—Å–µ–π ‚Ä¢ {formatCacheSize(cache.size)}
                    </div>
                  </div>

                  <Button
                    onClick={() => handleClearCache(cache.name)}
                    disabled={isClearing === cache.name}
                    variant="outline"
                    size="sm"
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Cache Strategy Info */}
      <Card>
        <CardHeader>
          <CardTitle>–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
          <CardDescription>
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">üîÑ Stale-While-Revalidate (API)</h4>
              <p className="text-sm text-muted-foreground">
                API –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫—ç—à –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
                –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª (TTL 5 –º–∏–Ω), –∂–¥–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å.
              </p>
            </div>

            <div>
              <h4 className="font-medium mb-2">üì¶ Cache-First (–°—Ç–∞—Ç–∏–∫–∞)</h4>
              <p className="text-sm text-muted-foreground">
                –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫—ç—à–∞.
                –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ TTL –∏–ª–∏ —Ä—É—á–Ω–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
              </p>
            </div>

            <div>
              <h4 className="font-medium mb-2">üåê Network-First (HTML)</h4>
              <p className="text-sm text-muted-foreground">
                HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Å–µ—Ç–∏.
                –ö—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

