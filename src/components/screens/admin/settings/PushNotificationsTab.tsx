"use client";

import React, { useState } from 'react';
import { toast } from 'sonner';
import { SimpleChart } from '../../../../shared/components/SimpleChart';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Textarea } from '@/shared/components/ui/textarea';
import { Button } from '@/shared/components/ui/button';
import { Switch } from '@/shared/components/ui/switch';
import { Badge } from '@/shared/components/ui/badge';
import { Bell, Send, Save, BarChart3, Star, Settings, Users } from 'lucide-react';

const notificationStats = [
  { metric: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', value: 12345, color: '#3b82f6' },
  { metric: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', value: 89, color: '#10b981', percentage: true },
  { metric: '–û—Ç–∫—Ä—ã—Ç–æ', value: 23, color: '#8b5cf6', percentage: true },
  { metric: 'CTR', value: 5.2, color: '#f59e0b', percentage: true },
];

export const PushNotificationsTab: React.FC = () => {
  const [notification, setNotification] = useState({
    title: 'üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
    body: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.',
    icon: '',
    badge: ''
  });

  const [settings, setSettings] = useState({
    enablePush: true,
    enableScheduled: false,
    enableSegmentation: true
  });

  const [rating, setRating] = useState(4);
  const [isSending, setIsSending] = useState(false);
  const [isSavingSettings, setIsSavingSettings] = useState(false);

  const handleSendNotification = async () => {
    if (!notification.title || !notification.body) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      return;
    }

    setIsSending(true);
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      if (!token) {
        toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º admin-api –≤–º–µ—Å—Ç–æ make-server
      const response = await fetch('https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/admin-api/notifications/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title: notification.title,
          body: notification.body,
          icon: notification.icon,
          badge: notification.badge
        })
      });

      if (response.ok) {
        toast.success('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üöÄ');
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setNotification({
          title: 'üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
          body: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.',
          icon: '',
          badge: ''
        });
      } else {
        const errorData = await response.json().catch(() => ({}));
        toast.error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('Error sending notification:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsSending(false);
    }
  };

  const handleSaveSettings = async () => {
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      if (!token) {
        toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º admin-api –≤–º–µ—Å—Ç–æ make-server
      const response = await fetch('https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/admin-api/settings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          key: 'push_notification_settings',
          value: JSON.stringify(settings)
        })
      });

      if (response.ok) {
        toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üîî');
      } else {
        const errorData = await response.json().catch(() => ({}));
        toast.error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (error) {
      console.error('Error saving push settings:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-lg">
            <Bell className="w-6 h-6 text-primary" />
          </div>
          <div>
            <h2 className="text-2xl font-bold">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
            <p className="text-sm text-muted-foreground">
              –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </p>
          </div>
        </div>
        <div className="flex gap-2">
          <Badge variant="success" className="gap-1">
            <div className="w-2 h-2 bg-green-500 rounded-full" />
            –ê–∫—Ç–∏–≤–µ–Ω
          </Badge>
          <Badge variant="outline">
            <Send className="w-3 h-3 mr-1" />
            12,345 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <div className="lg:col-span-2 space-y-6">
          {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="w-5 h-5" />
                –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </CardTitle>
              <CardDescription>
                –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="notification-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
                  <Input
                    id="notification-title"
                    type="text"
                    value={notification.title}
                    onChange={(e) => setNotification(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="notification-body">–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Label>
                  <Textarea
                    id="notification-body"
                    value={notification.body}
                    onChange={(e) => setNotification(prev => ({ ...prev, body: e.target.value }))}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    rows={4}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="notification-icon">–ò–∫–æ–Ω–∫–∞ (URL)</Label>
                    <Input
                      id="notification-icon"
                      type="text"
                      value={notification.icon}
                      onChange={(e) => setNotification(prev => ({ ...prev, icon: e.target.value }))}
                      placeholder="https://example.com/icon.png"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="notification-badge">–ë–µ–π–¥–∂ (URL)</Label>
                    <Input
                      id="notification-badge"
                      type="text"
                      value={notification.badge}
                      onChange={(e) => setNotification(prev => ({ ...prev, badge: e.target.value }))}
                      placeholder="https://example.com/badge.png"
                    />
                  </div>
                </div>

                <div className="flex justify-center pt-4">
                  <Button
                    onClick={handleSendNotification}
                    disabled={!notification.title || !notification.body || isSending}
                    size="lg"
                  >
                    {isSending ? (
                      <>
                        <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                        –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...
                      </>
                    ) : (
                      <>
                        <Send className="w-4 h-4 mr-2" />
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="space-y-6">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </CardTitle>
              <CardDescription>
                –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 gap-3">
                {notificationStats.map((stat, index) => (
                  <div key={index} className="p-4 bg-muted rounded-lg text-center border">
                    <div className={`text-2xl font-semibold mb-2 ${stat.percentage ? 'text-green-600 dark:text-green-500' : 'text-primary'}`}>
                      {stat.percentage ? `${stat.value}%` : stat.value.toLocaleString()}
                    </div>
                    <div className="text-muted-foreground text-sm">{stat.metric}</div>
                  </div>
                ))}
              </div>

              {/* –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ */}
              <div className="p-4 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg border border-yellow-200 dark:border-yellow-800">
                <div className="text-center mb-4">
                  <div className="font-medium mb-2">–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
                  <div className="flex justify-center gap-1">
                    {[1, 2, 3, 4, 5].map((starValue) => (
                      <button
                        key={starValue}
                        onClick={() => setRating(starValue)}
                        className="transition-all duration-200 transform hover:scale-110"
                        aria-label={`–û—Ü–µ–Ω–∫–∞ ${starValue} –∏–∑ 5`}
                      >
                        <Star
                          className={`w-8 h-8 ${
                            starValue <= rating ? 'fill-yellow-500 text-yellow-500' : 'text-gray-400'
                          }`}
                        />
                      </button>
                    ))}
                  </div>
                  <div className="text-sm mt-2">
                    –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <span className="font-semibold text-yellow-600 dark:text-yellow-500">{rating}/5</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </CardTitle>
              <CardDescription>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center justify-between p-4 bg-muted rounded-lg border">
                  <div className="flex items-center gap-3">
                    <Bell className="w-5 h-5 text-primary" />
                    <div>
                      <div className="font-medium">–í–∫–ª—é—á–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
                      <p className="text-sm text-muted-foreground">
                        –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                      </p>
                    </div>
                  </div>
                  <Switch
                    id="enable-push"
                    checked={settings.enablePush}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enablePush: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between p-4 bg-muted rounded-lg border">
                  <div className="flex items-center gap-3">
                    <Bell className="w-5 h-5 text-primary" />
                    <div>
                      <div className="font-medium">–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞</div>
                      <p className="text-sm text-muted-foreground">
                        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                      </p>
                    </div>
                  </div>
                  <Switch
                    id="enable-scheduled"
                    checked={settings.enableScheduled}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableScheduled: checked }))}
                  />
                </div>

                <div className="flex items-center justify-between p-4 bg-muted rounded-lg border">
                  <div className="flex items-center gap-3">
                    <Users className="w-5 h-5 text-primary" />
                    <div>
                      <div className="font-medium">–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏</div>
                      <p className="text-sm text-muted-foreground">
                        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
                      </p>
                    </div>
                  </div>
                  <Switch
                    id="enable-segmentation"
                    checked={settings.enableSegmentation}
                    onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enableSegmentation: checked }))}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="flex justify-center gap-4">
        <Button
          onClick={handleSaveSettings}
          disabled={isSavingSettings}
          variant="default"
        >
          {isSavingSettings ? (
            <>
              <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
              –°–æ—Ö—Ä–∞–Ω—è—é...
            </>
          ) : (
            <>
              <Save className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </>
          )}
        </Button>
        <Button
          onClick={() => {
            toast.info('–ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üìä');
          }}
          variant="outline"
        >
          <BarChart3 className="w-4 h-4 mr-2" />
          –ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–π
        </Button>
        <Button
          onClick={() => {
            toast.info('A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üéØ');
          }}
          variant="outline"
        >
          <Users className="w-4 h-4 mr-2" />
          A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        </Button>
      </div>
    </div>
  );
};