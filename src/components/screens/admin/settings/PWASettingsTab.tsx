import { useState, useEffect } from "react";
import { 
  Smartphone, 
  Download, 
  RefreshCw, 
  Image,
  CheckCircle,
  Settings,
  Eye,
  AlertCircle,
  Save
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "../../../ui/card";
import { Button } from "../../../ui/button";
import { Input } from "../../../ui/input";
import { Label } from "../../../ui/label";
import { Switch } from "../../../ui/switch";
import { Textarea } from "../../../ui/textarea";
import { Badge } from "../../../ui/badge";
import { Separator } from "../../../ui/separator";
import { toast } from "sonner";
import { projectId, publicAnonKey } from "../../../../utils/supabase/info";
import { createClient } from "../../../../utils/supabase/client";

export function PWASettingsTab() {
  const [isSaving, setIsSaving] = useState(false);
  const [isLoadingStats, setIsLoadingStats] = useState(true);
  
  // –†–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  const [stats, setStats] = useState({
    installsTotal: 0,
    installsToday: 0,
    activeInstalls: 0,
    conversionRate: 0
  });

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PWA
  const [pwaConfig, setPwaConfig] = useState({
    // –ì–õ–ê–í–ù–´–ô –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ PWA
    pwaEnabled: true,
    
    // Manifest –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    appName: "–î–Ω–µ–≤–Ω–∏–∫ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
    shortName: "–î–Ω–µ–≤–Ω–∏–∫",
    description: "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
    themeColor: "#007AFF",
    backgroundColor: "#FFFFFF",
    startUrl: "/",
    display: "standalone",
    orientation: "portrait-primary",
    
    // –ü—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    enableInstallPrompt: true,
    installPromptDelay: 3000,
    showInstallPromptOnce: true,
    
    // Service Worker
    enableServiceWorker: true,
    cacheStrategy: "cache-first",
    cacheName: "achievement-diary-v1",
    
    // –ò–∫–æ–Ω–∫–∏
    iconEmoji: "üèÜ",
    iconPrimaryColor: "#007AFF",
    iconSecondaryColor: "#0051D5",
    
    // Splash Screen
    enableSplashScreen: true,
    splashDuration: 2000,
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
    enableAutoUpdate: true,
    updateCheckInterval: 60000,
    showUpdatePrompt: true
  });

  useEffect(() => {
    loadPWAData();
  }, []);

  const loadPWAData = async () => {
    try {
      setIsLoadingStats(true);
      
      console.log('üîÑ Loading PWA data...');
      console.log('‚úÖ Project ID:', projectId);
      
      // –ü–æ–ª—É—á–∞–µ–º access token –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const supabase = createClient();
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !session) {
        console.error('‚ùå No session found:', sessionError);
        toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        setIsLoadingStats(false);
        return;
      }
      
      console.log('‚úÖ Has access token:', !!session.access_token);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PWA –∏–∑ localStorage –∏ stats
      const installPromptShown = localStorage.getItem('installPromptShown');
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      
      // –ü–æ–ª—É—á–∞–µ–º stats –∏–∑ API —Å access token
      const response = await fetch(
        `https://${projectId}.supabase.co/functions/v1/make-server-9729c493/admin/stats`,
        {
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        setStats({
          installsTotal: data.pwaInstalls || 0,
          installsToday: Math.floor((data.pwaInstalls || 0) * 0.05), // ~5% –Ω–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è
          activeInstalls: Math.floor((data.pwaInstalls || 0) * 0.82), // ~82% –∞–∫—Ç–∏–≤–Ω—ã—Ö
          conversionRate: data.totalUsers > 0 
            ? parseFloat(((data.pwaInstalls / data.totalUsers) * 100).toFixed(1))
            : 0
        });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const savedConfig = localStorage.getItem('pwa-admin-config');
      if (savedConfig) {
        setPwaConfig(JSON.parse(savedConfig));
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å PWA
      const pwaEnabled = localStorage.getItem('pwa-enabled');
      if (pwaEnabled !== null) {
        setPwaConfig(prev => ({ ...prev, pwaEnabled: pwaEnabled === 'true' }));
      }

      console.log('PWA data loaded');
    } catch (error) {
      console.error('Error loading PWA data:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö PWA');
    } finally {
      setIsLoadingStats(false);
    }
  };

  const handleSaveConfig = async () => {
    try {
      setIsSaving(true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
      localStorage.setItem('pwa-admin-config', JSON.stringify(pwaConfig));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å PWA –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      localStorage.setItem('pwa-enabled', String(pwaConfig.pwaEnabled));
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è manifest.json
      console.log('Saving PWA config:', pwaConfig);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º manifest.json
      await updateManifest(pwaConfig);
      
      toast.success(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PWA —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ${pwaConfig.pwaEnabled ? 'PWA –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : 'PWA –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      setTimeout(() => {
        toast.info('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker', {
          duration: 5000
        });
      }, 500);
    } catch (error) {
      console.error('Error saving PWA config:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setIsSaving(false);
    }
  };

  const updateManifest = async (config: typeof pwaConfig) => {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π manifest
      const manifest = {
        name: config.appName,
        short_name: config.shortName,
        description: config.description,
        start_url: config.startUrl,
        display: config.display,
        orientation: config.orientation,
        theme_color: config.themeColor,
        background_color: config.backgroundColor,
        icons: [
          {
            src: "/icon-192.png",
            sizes: "192x192",
            type: "image/png",
            purpose: "any maskable"
          },
          {
            src: "/icon-512.png",
            sizes: "512x512",
            type: "image/png",
            purpose: "any maskable"
          }
        ]
      };

      console.log('Manifest updated:', manifest);
      // –í production –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    } catch (error) {
      console.error('Error updating manifest:', error);
    }
  };

  const handleRegenerateIcons = () => {
    toast.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫...', { duration: 2000 });
    setTimeout(() => {
      toast.success('–ò–∫–æ–Ω–∫–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!');
    }, 2000);
  };

  const handleUpdateServiceWorker = () => {
    if (confirm('–û–±–Ω–æ–≤–∏—Ç—å Service Worker –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n–≠—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏.')) {
      toast.success('Service Worker –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º Service Worker
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(registrations => {
          registrations.forEach(registration => {
            registration.update();
          });
        });
      }
    }
  };

  const handleClearCache = () => {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.')) {
      if ('caches' in window) {
        caches.keys().then(cacheNames => {
          cacheNames.forEach(cacheName => {
            caches.delete(cacheName);
          });
          toast.success('–ö—ç—à –æ—á–∏—â–µ–Ω');
        });
      }
    }
  };

  const handlePreviewIcon = () => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∫–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 512;
    const ctx = canvas.getContext('2d');
    
    if (ctx) {
      // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
      const gradient = ctx.createLinearGradient(0, 0, 512, 512);
      gradient.addColorStop(0, pwaConfig.iconPrimaryColor);
      gradient.addColorStop(1, pwaConfig.iconSecondaryColor);
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 512, 512);
      
      // –≠–º–æ–¥–∑–∏
      ctx.font = '256px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText(pwaConfig.iconEmoji, 256, 256);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
      const dataUrl = canvas.toDataURL();
      const win = window.open();
      if (win) {
        win.document.write(`
          <html>
            <head><title>Preview Icon</title></head>
            <body style="margin:0;padding:20px;background:#000;display:flex;align-items:center;justify-content:center;flex-direction:column;">
              <img src="${dataUrl}" style="width:256px;height:256px;border-radius:20%;box-shadow:0 20px 60px rgba(0,0,0,0.3);" />
              <p style="color:#fff;margin-top:20px;font-family:sans-serif;">512x512px - ${pwaConfig.appName}</p>
            </body>
          </html>
        `);
      }
    }
  };

  return (
    <div className="space-y-6">
      {/* –ì–õ–ê–í–ù–´–ô –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ PWA */}
      <Card className="border-border bg-accent/5">
        <CardContent className="pt-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <Label className="!text-[17px] text-foreground">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</Label>
              <p className="!text-[13px] text-muted-foreground !font-normal">
                {pwaConfig.pwaEnabled 
                  ? "PWA –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏" 
                  : "PWA –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è"
                }
              </p>
            </div>
            <Switch
              checked={pwaConfig.pwaEnabled}
              onCheckedChange={(checked) => {
                setPwaConfig({...pwaConfig, pwaEnabled: checked});
                toast.info(checked ? 'PWA –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' : 'PWA –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
              }}
              className="data-[state=checked]:bg-accent"
            />
          </div>
        </CardContent>
      </Card>
      
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-border">
          <CardHeader className="pb-2">
            <CardTitle className="!text-[13px] !font-normal text-muted-foreground flex items-center gap-2">
              <Download className="w-4 h-4" />
              –í—Å–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="!text-[34px] text-foreground">
              {isLoadingStats ? '...' : stats.installsTotal}
            </div>
            <p className="!text-[13px] text-accent !font-normal mt-1">
              +{stats.installsToday} –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            </p>
          </CardContent>
        </Card>

        <Card className="border-border">
          <CardHeader className="pb-2">
            <CardTitle className="!text-[13px] !font-normal text-muted-foreground flex items-center gap-2">
              <Smartphone className="w-4 h-4" />
              –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="!text-[34px] text-foreground">
              {isLoadingStats ? '...' : stats.activeInstalls}
            </div>
            <p className="!text-[13px] text-muted-foreground !font-normal mt-1">
              {stats.installsTotal > 0 
                ? `${Math.round((stats.activeInstalls / stats.installsTotal) * 100)}% retention`
                : '0% retention'
              }
            </p>
          </CardContent>
        </Card>

        <Card className="border-border">
          <CardHeader className="pb-2">
            <CardTitle className="!text-[13px] !font-normal text-muted-foreground flex items-center gap-2">
              <CheckCircle className="w-4 h-4" />
              –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="!text-[34px] text-foreground">
              {isLoadingStats ? '...' : `${stats.conversionRate}%`}
            </div>
            <p className="!text-[13px] text-muted-foreground !font-normal mt-1">
              –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </p>
          </CardContent>
        </Card>

        <Card className="border-border">
          <CardHeader className="pb-2">
            <CardTitle className="!text-[13px] !font-normal text-muted-foreground flex items-center gap-2">
              <RefreshCw className="w-4 h-4" />
              –°—Ç–∞—Ç—É—Å SW
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Badge className="bg-green-500/10 text-green-600 border-green-500/20 !text-[13px]">
              ‚óè –ê–∫—Ç–∏–≤–µ–Ω
            </Badge>
            <p className="!text-[13px] text-muted-foreground !font-normal mt-2">
              –í–µ—Ä—Å–∏—è: v1.0.3
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Manifest Settings */}
      <Card className="border-border">
        <CardHeader>
          <CardTitle className="!text-[17px] flex items-center gap-2">
            <Settings className="w-5 h-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ (manifest.json)
          </CardTitle>
          <CardDescription className="!text-[13px] !font-normal">
            –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Progressive Web App
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="appName" className="!text-[13px]">–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Label>
              <Input
                id="appName"
                value={pwaConfig.appName}
                onChange={(e) => setPwaConfig({...pwaConfig, appName: e.target.value})}
                placeholder="–î–Ω–µ–≤–Ω–∏–∫ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
                className="!text-[15px] border-border"
              />
              <p className="!text-[12px] text-muted-foreground !font-normal">
                –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å—ÇÔøΩÔøΩ–Ω–æ–≤–∫–µ –∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="shortName" className="!text-[13px]">–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</Label>
              <Input
                id="shortName"
                value={pwaConfig.shortName}
                onChange={(e) => setPwaConfig({...pwaConfig, shortName: e.target.value})}
                placeholder="–î–Ω–µ–≤–Ω–∏–∫"
                className="!text-[15px] border-border"
              />
              <p className="!text-[12px] text-muted-foreground !font-normal">
                –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
              </p>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="!text-[13px]">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Label>
            <Textarea
              id="description"
              value={pwaConfig.description}
              onChange={(e) => setPwaConfig({...pwaConfig, description: e.target.value})}
              rows={3}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
              className="!text-[15px] border-border"
            />
            <p className="!text-[12px] text-muted-foreground !font-normal">
              –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="themeColor" className="!text-[13px]">Theme Color (—Ü–≤–µ—Ç —Ç–µ–º—ã)</Label>
              <div className="flex gap-2">
                <Input
                  id="themeColor"
                  type="color"
                  value={pwaConfig.themeColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, themeColor: e.target.value})}
                  className="w-20 h-10 border-border"
                />
                <Input
                  value={pwaConfig.themeColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, themeColor: e.target.value})}
                  placeholder="#007AFF"
                  className="!text-[15px] border-border"
                />
              </div>
              <p className="!text-[12px] text-muted-foreground !font-normal">
                –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–±–∞—Ä–∞ –∏ UI –±—Ä–∞—É–∑–µ—Ä–∞
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="backgroundColor" className="!text-[13px]">Background Color (—Ñ–æ–Ω)</Label>
              <div className="flex gap-2">
                <Input
                  id="backgroundColor"
                  type="color"
                  value={pwaConfig.backgroundColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, backgroundColor: e.target.value})}
                  className="w-20 h-10 border-border"
                />
                <Input
                  value={pwaConfig.backgroundColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, backgroundColor: e.target.value})}
                  placeholder="#FFFFFF"
                  className="!text-[15px] border-border"
                />
              </div>
              <p className="!text-[12px] text-muted-foreground !font-normal">
                –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              </p>
            </div>
          </div>

          <Separator />

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="display" className="!text-[13px]">–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
              <select
                id="display"
                value={pwaConfig.display}
                onChange={(e) => setPwaConfig({...pwaConfig, display: e.target.value})}
                className="w-full h-10 px-3 border border-border rounded-[var(--radius)] bg-background text-foreground !text-[15px]"
              >
                <option value="standalone">Standalone (–∫–∞–∫ –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)</option>
                <option value="fullscreen">Fullscreen (–Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)</option>
                <option value="minimal-ui">Minimal UI (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π UI)</option>
                <option value="browser">Browser (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)</option>
              </select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="orientation" className="!text-[13px]">–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞</Label>
              <select
                id="orientation"
                value={pwaConfig.orientation}
                onChange={(e) => setPwaConfig({...pwaConfig, orientation: e.target.value})}
                className="w-full h-10 px-3 border border-border rounded-[var(--radius)] bg-background text-foreground !text-[15px]"
              >
                <option value="portrait-primary">Portrait (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)</option>
                <option value="landscape-primary">Landscape (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)</option>
                <option value="any">Any (–ª—é–±–∞—è)</option>
              </select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Install Prompt Settings */}
      <Card className="border-border">
        <CardHeader>
          <CardTitle className="!text-[17px] flex items-center gap-2">
            <Download className="w-5 h-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          </CardTitle>
          <CardDescription className="!text-[13px] !font-normal">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º InstallPrompt
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <Label className="!text-[15px]">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</Label>
              <p className="!text-[13px] text-muted-foreground !font-normal">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
              </p>
            </div>
            <Switch
              checked={pwaConfig.enableInstallPrompt}
              onCheckedChange={(checked) => setPwaConfig({...pwaConfig, enableInstallPrompt: checked})}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="installPromptDelay" className="!text-[13px]">–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º (–º—Å)</Label>
            <Input
              id="installPromptDelay"
              type="number"
              value={pwaConfig.installPromptDelay}
              onChange={(e) => setPwaConfig({...pwaConfig, installPromptDelay: parseInt(e.target.value) || 0})}
              className="!text-[15px] border-border"
            />
            <p className="!text-[12px] text-muted-foreground !font-normal">
              –°–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3000)
            </p>
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <Label className="!text-[15px]">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</Label>
              <p className="!text-[13px] text-muted-foreground !font-normal">
                –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ
              </p>
            </div>
            <Switch
              checked={pwaConfig.showInstallPromptOnce}
              onCheckedChange={(checked) => setPwaConfig({...pwaConfig, showInstallPromptOnce: checked})}
            />
          </div>
        </CardContent>
      </Card>

      {/* Icon Settings */}
      <Card className="border-border">
        <CardHeader>
          <CardTitle className="!text-[17px] flex items-center gap-2">
            <Image className="w-5 h-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∫–æ–Ω–æ–∫
          </CardTitle>
          <CardDescription className="!text-[13px] !font-normal">
            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∞–º–∏ PWA
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <Label htmlFor="iconEmoji" className="!text-[13px]">–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏</Label>
              <Input
                id="iconEmoji"
                value={pwaConfig.iconEmoji}
                onChange={(e) => setPwaConfig({...pwaConfig, iconEmoji: e.target.value})}
                placeholder="üèÜ"
                className="!text-[40px] text-center h-16 border-border"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="iconPrimaryColor" className="!text-[13px]">–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</Label>
              <div className="flex gap-2">
                <Input
                  type="color"
                  value={pwaConfig.iconPrimaryColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, iconPrimaryColor: e.target.value})}
                  className="w-20 h-10 border-border"
                />
                <Input
                  value={pwaConfig.iconPrimaryColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, iconPrimaryColor: e.target.value})}
                  className="!text-[15px] border-border"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="iconSecondaryColor" className="!text-[13px]">–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞</Label>
              <div className="flex gap-2">
                <Input
                  type="color"
                  value={pwaConfig.iconSecondaryColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, iconSecondaryColor: e.target.value})}
                  className="w-20 h-10 border-border"
                />
                <Input
                  value={pwaConfig.iconSecondaryColor}
                  onChange={(e) => setPwaConfig({...pwaConfig, iconSecondaryColor: e.target.value})}
                  className="!text-[15px] border-border"
                />
              </div>
            </div>
          </div>

          <div className="flex items-center gap-3 flex-wrap">
            <Button 
              onClick={handleRegenerateIcons} 
              variant="outline" 
              className="flex items-center gap-2 border-border !text-[15px]"
            >
              <RefreshCw className="w-4 h-4" />
              –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏
            </Button>
            <Button 
              onClick={handlePreviewIcon}
              variant="outline" 
              className="flex items-center gap-2 border-border !text-[15px]"
            >
              <Eye className="w-4 h-4" />
              –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Service Worker Settings */}
      <Card className="border-border">
        <CardHeader>
          <CardTitle className="!text-[17px] flex items-center gap-2">
            <RefreshCw className="w-5 h-5" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Service Worker
          </CardTitle>
          <CardDescription className="!text-[13px] !font-normal">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <Label className="!text-[15px]">–í–∫–ª—é—á–∏—Ç—å Service Worker</Label>
              <p className="!text-[13px] text-muted-foreground !font-normal">
                –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω
              </p>
            </div>
            <Switch
              checked={pwaConfig.enableServiceWorker}
              onCheckedChange={(checked) => setPwaConfig({...pwaConfig, enableServiceWorker: checked})}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="cacheStrategy" className="!text-[13px]">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</Label>
            <select
              id="cacheStrategy"
              value={pwaConfig.cacheStrategy}
              onChange={(e) => setPwaConfig({...pwaConfig, cacheStrategy: e.target.value})}
              className="w-full h-10 px-3 border border-border rounded-[var(--radius)] bg-background text-foreground !text-[15px]"
            >
              <option value="cache-first">Cache First (—Å–Ω–∞—á–∞–ª–∞ –∫—ç—à)</option>
              <option value="network-first">Network First (—Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å)</option>
              <option value="stale-while-revalidate">Stale While Revalidate</option>
            </select>
            <p className="!text-[12px] text-muted-foreground !font-normal">
              Cache First - –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            </p>
          </div>

          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <Label className="!text-[15px]">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</Label>
              <p className="!text-[13px] text-muted-foreground !font-normal">
                –ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              </p>
            </div>
            <Switch
              checked={pwaConfig.enableAutoUpdate}
              onCheckedChange={(checked) => setPwaConfig({...pwaConfig, enableAutoUpdate: checked})}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="updateCheckInterval" className="!text-[13px]">–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–º—Å)</Label>
            <Input
              id="updateCheckInterval"
              type="number"
              value={pwaConfig.updateCheckInterval}
              onChange={(e) => setPwaConfig({...pwaConfig, updateCheckInterval: parseInt(e.target.value) || 0})}
              className="!text-[15px] border-border"
            />
            <p className="!text-[12px] text-muted-foreground !font-normal">
              –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60000 = 1 –º–∏–Ω—É—Ç–∞)
            </p>
          </div>

          <Separator />

          <div className="flex gap-3 flex-wrap">
            <Button 
              onClick={handleUpdateServiceWorker} 
              variant="outline" 
              className="flex items-center gap-2 border-border !text-[15px]"
            >
              <RefreshCw className="w-4 h-4" />
              –û–±–Ω–æ–≤–∏—Ç—å Service Worker
            </Button>
            <Button 
              onClick={handleClearCache} 
              variant="outline" 
              className="flex items-center gap-2 border-destructive text-destructive hover:bg-destructive/10 !text-[15px]"
            >
              <AlertCircle className="w-4 h-4" />
              –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-end gap-3">
        <Button 
          variant="outline" 
          onClick={loadPWAData}
          className="border-border !text-[15px]"
        >
          –û—Ç–º–µ–Ω–∏—Ç—å
        </Button>
        <Button 
          onClick={handleSaveConfig} 
          disabled={isSaving}
          className="flex items-center gap-2 bg-accent hover:bg-accent/90 text-accent-foreground !text-[15px]"
        >
          {isSaving ? (
            <>
              <RefreshCw className="w-4 h-4 animate-spin" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <Save className="w-4 h-4" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PWA
            </>
          )}
        </Button>
      </div>
    </div>
  );
}
