import { Hono } from 'npm:hono';
import { cors } from 'npm:hono/cors';
import { logger } from 'npm:hono/logger';
import { createClient } from 'jsr:@supabase/supabase-js@2';
import { Buffer } from 'node:buffer';
import * as kv from './kv_store.tsx';

const app = new Hono();

// CORS –∏ logger middleware
app.use('*', cors({
  origin: '*',
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'],
}));
app.use('*', logger(console.log));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// ======================
// VOICE TRANSCRIPTION (Whisper API)
// ======================
app.post('/make-server-9729c493/transcribe', async (c) => {
  try {
    const { audio, mimeType } = await c.req.json();

    if (!audio) {
      return c.json({ success: false, error: 'Audio data is required' }, 400);
    }

    console.log('Transcribing audio with Whisper API...');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ buffer
    const audioBuffer = Buffer.from(audio, 'base64');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const extension = mimeType?.includes('webm') ? 'webm' : 'mp4';
    const filename = `audio_${Date.now()}.${extension}`;

    // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç –¥–ª—è OpenAI
    const audioFile = new File([audioBuffer], filename, { type: mimeType || 'audio/webm' });

    // –í—ã–∑—ã–≤–∞–µ–º Whisper API
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      return c.json({ success: false, error: 'OpenAI API key not configured' }, 500);
    }

    const formData = new FormData();
    formData.append('file', audioFile);
    formData.append('model', 'whisper-1');
    formData.append('language', 'ru'); // –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π

    const whisperResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`
      },
      body: formData
    });

    if (!whisperResponse.ok) {
      const error = await whisperResponse.text();
      console.error('Whisper API error:', error);
      return c.json({ 
        success: false, 
        error: `Whisper API failed: ${whisperResponse.status}` 
      }, 500);
    }

    const result = await whisperResponse.json();
    const transcribedText = result.text;

    console.log('Transcription successful:', transcribedText);

    return c.json({
      success: true,
      text: transcribedText
    });

  } catch (error) {
    console.error('Error transcribing audio:', error);
    return c.json({ 
      success: false, 
      error: `Failed to transcribe audio: ${error.message}` 
    }, 500);
  }
});

// ======================
// MEDIA UPLOAD
// ======================

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª
app.post('/make-server-9729c493/media/upload', async (c) => {
  try {
    const { file, fileName, mimeType, userId } = await c.req.json();

    if (!file || !fileName || !userId) {
      return c.json({ success: false, error: 'file, fileName, and userId are required' }, 400);
    }

    console.log(`Uploading media for user ${userId}: ${fileName}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ buffer
    const fileBuffer = Buffer.from(file, 'base64');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const extension = fileName.split('.').pop();
    const uniqueFileName = `${userId}/${timestamp}_${fileName}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
    const { data, error } = await supabase.storage
      .from(MEDIA_BUCKET_NAME)
      .upload(uniqueFileName, fileBuffer, {
        contentType: mimeType,
        upsert: false
      });

    if (error) {
      console.error('Error uploading to storage:', error);
      return c.json({ 
        success: false, 
        error: `Failed to upload: ${error.message}` 
      }, 500);
    }

    // –°–æ–∑–¥–∞–µ–º signed URL (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 –≥–æ–¥)
    const { data: signedUrlData } = await supabase.storage
      .from(MEDIA_BUCKET_NAME)
      .createSignedUrl(uniqueFileName, 31536000); // 1 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    console.log(`Media uploaded successfully: ${uniqueFileName}`);

    return c.json({
      success: true,
      path: uniqueFileName,
      url: signedUrlData?.signedUrl || '',
      mimeType
    });

  } catch (error) {
    console.error('Error in media upload:', error);
    return c.json({ 
      success: false, 
      error: `Failed to upload media: ${error.message}` 
    }, 500);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å signed URL –¥–ª—è –º–µ–¥–∏–∞
app.post('/make-server-9729c493/media/signed-url', async (c) => {
  try {
    const { path } = await c.req.json();

    if (!path) {
      return c.json({ success: false, error: 'path is required' }, 400);
    }

    // –°–æ–∑–¥–∞–µ–º signed URL (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 –≥–æ–¥)
    const { data, error } = await supabase.storage
      .from(MEDIA_BUCKET_NAME)
      .createSignedUrl(path, 31536000);

    if (error) {
      console.error('Error creating signed URL:', error);
      return c.json({ 
        success: false, 
        error: `Failed to create signed URL: ${error.message}` 
      }, 500);
    }

    return c.json({
      success: true,
      url: data.signedUrl
    });

  } catch (error) {
    console.error('Error creating signed URL:', error);
    return c.json({ 
      success: false, 
      error: `Failed to create signed URL: ${error.message}` 
    }, 500);
  }
});

// –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª
app.delete('/make-server-9729c493/media/:path', async (c) => {
  try {
    const path = c.req.param('path');

    if (!path) {
      return c.json({ success: false, error: 'path is required' }, 400);
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage
    const { error } = await supabase.storage
      .from(MEDIA_BUCKET_NAME)
      .remove([path]);

    if (error) {
      console.error('Error deleting from storage:', error);
      return c.json({ 
        success: false, 
        error: `Failed to delete: ${error.message}` 
      }, 500);
    }

    console.log(`Media deleted successfully: ${path}`);

    return c.json({
      success: true
    });

  } catch (error) {
    console.error('Error deleting media:', error);
    return c.json({ 
      success: false, 
      error: `Failed to delete media: ${error.message}` 
    }, 500);
  }
});

// ======================
// HEALTH CHECK
// ======================
app.get('/make-server-9729c493/health', (c) => {
  return c.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// ======================
// USER PROFILES
// ======================

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/make-server-9729c493/profiles/create', async (c) => {
  try {
    const profileData = await c.req.json();
    
    if (!profileData.id || !profileData.email) {
      return c.json({ success: false, error: 'id and email are required' }, 400);
    }

    const profile = {
      id: profileData.id,
      email: profileData.email,
      name: profileData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      diaryName: profileData.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
      diaryEmoji: profileData.diaryEmoji || 'üèÜ',
      language: profileData.language || 'ru',
      notificationSettings: profileData.notificationSettings || {
        selectedTime: 'none',
        morningTime: '08:00',
        eveningTime: '21:00',
        permissionGranted: false
      },
      createdAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await kv.set(`profile:${profileData.id}`, profile);

    console.log(`Created profile for user ${profileData.id}`);

    return c.json({
      success: true,
      profile
    });

  } catch (error) {
    console.error('Error creating profile:', error);
    return c.json({ 
      success: false, 
      error: `Failed to create profile: ${error.message}` 
    }, 500);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/make-server-9729c493/profiles/:userId', async (c) => {
  try {
    const userId = c.req.param('userId');
    
    let profile = await kv.get(`profile:${userId}`);
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!profile) {
      console.log(`Profile not found for user ${userId}, creating new profile...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase Auth
      const { data: authUser, error: authError } = await supabase.auth.admin.getUserById(userId);
      
      if (authError) {
        console.error('Error getting user from auth:', authError);
        return c.json({ success: false, error: 'User not found in auth' }, 404);
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      profile = {
        id: userId,
        email: authUser.user.email,
        name: authUser.user.email?.split('@')[0] || 'User',
        diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
        diaryEmoji: 'üèÜ',
        language: 'ru',
        notificationSettings: {
          selectedTime: 'none',
          morningTime: '08:00',
          eveningTime: '21:00',
          permissionGranted: false
        },
        onboardingCompleted: false, // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      await kv.set(`profile:${userId}`, profile);
      console.log(`Created new profile for user ${userId}`);
    }

    return c.json({
      success: true,
      profile
    });

  } catch (error) {
    console.error('Error fetching profile:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch profile: ${error.message}` 
    }, 500);
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/make-server-9729c493/profiles/:userId', async (c) => {
  try {
    const userId = c.req.param('userId');
    const updates = await c.req.json();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const existingProfile = await kv.get(`profile:${userId}`);
    
    if (!existingProfile) {
      return c.json({ success: false, error: 'Profile not found' }, 404);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedProfile = {
      ...existingProfile,
      ...updates,
      id: userId, // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω–∏—Ç—å ID
      updatedAt: new Date().toISOString()
    };

    await kv.set(`profile:${userId}`, updatedProfile);

    console.log(`Updated profile for user ${userId}`);

    return c.json({
      success: true,
      profile: updatedProfile
    });

  } catch (error) {
    console.error('Error updating profile:', error);
    return c.json({ 
      success: false, 
      error: `Failed to update profile: ${error.message}` 
    }, 500);
  }
});

// ======================
// AI CHAT ANALYSIS
// ======================
app.post('/make-server-9729c493/chat/analyze', async (c) => {
  try {
    const { text, userName, userId } = await c.req.json();
    
    if (!text || typeof text !== 'string') {
      return c.json({ success: false, error: 'Text is required' }, 400);
    }

    console.log(`Analyzing text for user: ${userName || 'anonymous'}`);

    // –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    let userLanguage = 'ru';
    if (userId) {
      const profile = await kv.get(`profile:${userId}`);
      if (profile?.language) {
        userLanguage = profile.language;
      }
    }

    console.log(`User language: ${userLanguage}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openaiApiKey) {
      console.error('OPENAI_API_KEY is not set in environment variables');
      return c.json({ 
        success: false, 
        error: 'OpenAI API key is not configured. Please set OPENAI_API_KEY environment variable.' 
      }, 500);
    }

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `–¢—ã - –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–î–Ω–µ–≤–Ω–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π".
–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${userLanguage}).

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –î–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —ç–º–æ–¥–∂–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è)
2. –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (summary, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) - —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥/–∏–Ω—Å–∞–π—Ç (insight, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) - —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å sentiment: positive, neutral, negative
5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑: –°–µ–º—å—è, –†–∞–±–æ—Ç–∞, –§–∏–Ω–∞–Ω—Å—ã, –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –ó–¥–æ—Ä–æ–≤—å–µ, –õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –û—Ç–Ω–æ—à–µ–Ω–∏—è
6. –í—ã–¥–µ–ª–∏—Ç—å –¥–æ 3 —Ç–µ–≥–æ–≤ (–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
7. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º (isAchievement: true/false)
8. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/—ç–º–æ—Ü–∏—é (mood: –Ω–∞–ø—Ä–∏–º–µ—Ä "—Ä–∞–¥–æ—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ")

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "reply": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —è–∑—ã–∫–µ ${userLanguage}",
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ ${userLanguage}",
  "insight": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —è–∑—ã–∫–µ ${userLanguage}",
  "sentiment": "positive|neutral|negative",
  "category": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —è–∑—ã–∫–µ ${userLanguage}",
  "tags": ["—Ç–µ–≥1", "—Ç–µ–≥2"],
  "confidence": 0.95,
  "isAchievement": true,
  "mood": "—ç–º–æ—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ ${userLanguage}"
}`
          },
          {
            role: 'user',
            content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName || '–ê–Ω–æ–Ω–∏–º'} –Ω–∞–ø–∏—Å–∞–ª: "${text}"`
          }
        ],
        temperature: 0.7,
        max_tokens: 400
      })
    });

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('OpenAI API error:', errorText);
      return c.json({ 
        success: false, 
        error: `OpenAI API error: ${openaiResponse.status}` 
      }, 500);
    }

    const openaiData = await openaiResponse.json();
    console.log('OpenAI response:', openaiData);

    const aiMessage = openaiData.choices?.[0]?.message?.content;
    if (!aiMessage) {
      throw new Error('No response from OpenAI');
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
    let analysis;
    try {
      analysis = JSON.parse(aiMessage);
    } catch (parseError) {
      console.error('Failed to parse AI response:', aiMessage);
      // Fallback –µ—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª –Ω–µ JSON
      analysis = {
        reply: aiMessage,
        summary: text.substring(0, 100),
        insight: '–ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!',
        sentiment: 'positive',
        category: '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
        tags: ['–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'],
        confidence: 0.5,
        isAchievement: true,
        mood: '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
      };
    }

    return c.json({
      success: true,
      analysis: {
        reply: analysis.reply || '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™',
        summary: analysis.summary || text.substring(0, 100),
        insight: analysis.insight || '–ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!',
        sentiment: analysis.sentiment || 'positive',
        category: analysis.category || '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
        tags: analysis.tags || [],
        confidence: analysis.confidence || 0.5,
        isAchievement: analysis.isAchievement !== undefined ? analysis.isAchievement : true,
        mood: analysis.mood || '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ'
      }
    });

  } catch (error) {
    console.error('Error in chat analysis:', error);
    return c.json({ 
      success: false, 
      error: `Chat analysis error: ${error.message}` 
    }, 500);
  }
});

// ======================
// DIARY ENTRIES
// ======================

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
app.post('/make-server-9729c493/entries/create', async (c) => {
  try {
    const entry = await c.req.json();
    
    if (!entry.userId || !entry.text) {
      return c.json({ success: false, error: 'userId and text are required' }, 400);
    }

    const entryId = crypto.randomUUID();
    const now = new Date().toISOString();

    const entryData = {
      id: entryId,
      userId: entry.userId,
      text: entry.text,
      voiceUrl: entry.voiceUrl || null,
      mediaUrl: entry.mediaUrl || null,
      media: entry.media || [],
      sentiment: entry.sentiment || 'positive',
      category: entry.category || '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
      tags: entry.tags || [],
      aiReply: entry.aiReply || '',
      aiResponse: entry.aiResponse || entry.aiReply || '',
      aiSummary: entry.aiSummary || null,
      aiInsight: entry.aiInsight || null,
      isAchievement: entry.isAchievement !== undefined ? entry.isAchievement : true,
      mood: entry.mood || null,
      createdAt: now,
      streakDay: entry.streakDay || 1,
      focusArea: entry.focusArea || entry.category || '–õ–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ KV store
    await kv.set(`entry:${entryId}`, entryData);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEntriesKey = `user_entries:${entry.userId}`;
    const existingEntries = await kv.get(userEntriesKey) || [];
    const updatedEntries = [entryId, ...existingEntries];
    await kv.set(userEntriesKey, updatedEntries);

    console.log(`Created entry ${entryId} for user ${entry.userId} with ${entry.media?.length || 0} media files`);

    return c.json({
      success: true,
      entry: entryData
    });

  } catch (error) {
    console.error('Error creating entry:', error);
    return c.json({ 
      success: false, 
      error: `Failed to create entry: ${error.message}` 
    }, 500);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/make-server-9729c493/entries/list', async (c) => {
  try {
    const userId = c.req.query('userId');
    const limit = parseInt(c.req.query('limit') || '50');

    if (!userId) {
      return c.json({ success: false, error: 'userId is required' }, 400);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEntriesKey = `user_entries:${userId}`;
    const entryIds = await kv.get(userEntriesKey) || [];

    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–∏ –∑–∞–ø–∏—Å–∏
    const entries = [];
    for (const entryId of entryIds.slice(0, limit)) {
      const entry = await kv.get(`entry:${entryId}`);
      if (entry) {
        entries.push(entry);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    entries.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

    console.log(`Retrieved ${entries.length} entries for user ${userId}`);

    return c.json({
      success: true,
      entries
    });

  } catch (error) {
    console.error('Error fetching entries:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch entries: ${error.message}` 
    }, 500);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
app.get('/make-server-9729c493/entries/:id', async (c) => {
  try {
    const entryId = c.req.param('id');
    
    const entry = await kv.get(`entry:${entryId}`);
    
    if (!entry) {
      return c.json({ success: false, error: 'Entry not found' }, 404);
    }

    return c.json({
      success: true,
      entry
    });

  } catch (error) {
    console.error('Error fetching entry:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch entry: ${error.message}` 
    }, 500);
  }
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
app.delete('/make-server-9729c493/entries/:id', async (c) => {
  try {
    const entryId = c.req.param('id');
    const userId = c.req.query('userId');

    if (!userId) {
      return c.json({ success: false, error: 'userId is required' }, 400);
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await kv.del(`entry:${entryId}`);

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEntriesKey = `user_entries:${userId}`;
    const entryIds = await kv.get(userEntriesKey) || [];
    const updatedIds = entryIds.filter((id: string) => id !== entryId);
    await kv.set(userEntriesKey, updatedIds);

    console.log(`Deleted entry ${entryId} for user ${userId}`);

    return c.json({
      success: true
    });

  } catch (error) {
    console.error('Error deleting entry:', error);
    return c.json({ 
      success: false, 
      error: `Failed to delete entry: ${error.message}` 
    }, 500);
  }
});

// ======================
// USER STATISTICS
// ======================
app.get('/make-server-9729c493/stats/:userId', async (c) => {
  try {
    const userId = c.req.param('userId');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEntriesKey = `user_entries:${userId}`;
    const entryIds = await kv.get(userEntriesKey) || [];

    const entries = [];
    for (const entryId of entryIds) {
      const entry = await kv.get(`entry:${entryId}`);
      if (entry) {
        entries.push(entry);
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const categoryCounts: { [key: string]: number } = {};
    const sentimentCounts: { [key: string]: number } = {};
    let lastEntryDate = null;

    for (const entry of entries) {
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
      categoryCounts[entry.category] = (categoryCounts[entry.category] || 0) + 1;
      
      // Sentiment
      sentimentCounts[entry.sentiment] = (sentimentCounts[entry.sentiment] || 0) + 1;
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
      if (!lastEntryDate || new Date(entry.createdAt) > new Date(lastEntryDate)) {
        lastEntryDate = entry.createdAt;
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º streak
    const currentStreak = calculateStreak(entries);

    const stats = {
      totalEntries: entries.length,
      currentStreak,
      categoryCounts,
      sentimentCounts,
      lastEntryDate
    };

    console.log(`Retrieved stats for user ${userId}:`, stats);

    return c.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('Error fetching stats:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch stats: ${error.message}` 
    }, 500);
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è streak
function calculateStreak(entries: any[]): number {
  if (entries.length === 0) return 0;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  const sorted = entries
    .map(e => new Date(e.createdAt))
    .sort((a, b) => b.getTime() - a.getTime());

  let streak = 1;
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
  const latestEntry = new Date(sorted[0]);
  latestEntry.setHours(0, 0, 0, 0);
  
  const daysDiff = Math.floor((today.getTime() - latestEntry.getTime()) / (1000 * 60 * 60 * 24));
  
  if (daysDiff > 1) {
    return 0; // Streak –ø—Ä–µ—Ä–≤–∞–ª—Å—è
  }

  // –°—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
  for (let i = 1; i < sorted.length; i++) {
    const currentDate = new Date(sorted[i]);
    currentDate.setHours(0, 0, 0, 0);
    
    const prevDate = new Date(sorted[i - 1]);
    prevDate.setHours(0, 0, 0, 0);
    
    const diff = Math.floor((prevDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diff === 1) {
      streak++;
    } else if (diff === 0) {
      // –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ–¥–∏–Ω –¥–µ–Ω—å - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º streak
      continue;
    } else {
      break; // Streak –ø—Ä–µ—Ä–≤–∞–ª—Å—è
    }
  }

  return streak;
}

// ======================
// ADMIN API
// ======================

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/make-server-9729c493/admin/stats', async (c) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const accessToken = c.req.header('Authorization')?.split(' ')[1];
    
    if (!accessToken) {
      return c.json({ success: false, error: 'Unauthorized' }, 401);
    }

    const { data: { user }, error: authError } = await supabase.auth.getUser(accessToken);
    
    if (authError || !user || user.email !== 'diary@leadshunter.biz') {
      return c.json({ success: false, error: 'Access denied. Super admin only.' }, 403);
    }

    console.log('Fetching admin stats...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const profiles = await kv.getByPrefix('profile:');
    const totalUsers = profiles.length;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    const allEntriesData = await kv.getByPrefix('entries:');
    let totalEntries = 0;
    let activeUsersSet = new Set();
    let newUsersToday = 0;
    let activeTodaySet = new Set();

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    for (const profile of profiles) {
      // –ü–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è
      if (profile.createdAt) {
        const createdDate = new Date(profile.createdAt);
        createdDate.setHours(0, 0, 0, 0);
        if (createdDate.getTime() === today.getTime()) {
          newUsersToday++;
        }
      }
    }

    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const entriesKey of allEntriesData) {
      if (Array.isArray(entriesKey)) {
        const entries = entriesKey;
        totalEntries += entries.length;
        
        if (entries.length > 0) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∑–∞–ø–∏—Å—è–º–∏ = –∞–∫—Ç–∏–≤–Ω—ã–π
          const userId = entriesKey[0]?.userId;
          if (userId) {
            activeUsersSet.add(userId);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
          for (const entry of entries) {
            const entryDate = new Date(entry.createdAt);
            entryDate.setHours(0, 0, 0, 0);
            
            if (entryDate.getTime() === today.getTime() && entry.userId) {
              activeTodaySet.add(entry.userId);
            }
          }
        }
      }
    }

    const activeUsers = activeUsersSet.size;
    const activeToday = activeTodaySet.size;

    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let premiumUsers = 0;
    for (const profile of profiles) {
      if (profile.subscriptionStatus === 'active' || profile.isPremium) {
        premiumUsers++;
      }
    }

    // –ü–æ–¥—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 499 —Ä—É–±/–º–µ—Å—è—Ü –∑–∞ –ø—Ä–µ–º–∏—É–º)
    const totalRevenue = premiumUsers * 499;

    // –ü–æ–¥—Å—á–µ—Ç PWA —É—Å—Ç–∞–Ω–æ–≤–æ–∫
    let pwaInstalls = 0;
    for (const profile of profiles) {
      if (profile.pwaInstalled) {
        pwaInstalls++;
      }
    }

    const stats = {
      totalUsers,
      activeUsers,
      premiumUsers,
      totalRevenue,
      newUsersToday,
      activeToday,
      totalEntries,
      pwaInstalls
    };

    console.log('Admin stats calculated:', stats);

    return c.json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('Error fetching admin stats:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch admin stats: ${error.message}` 
    }, 500);
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/make-server-9729c493/admin/users', async (c) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const accessToken = c.req.header('Authorization')?.split(' ')[1];
    
    if (!accessToken) {
      return c.json({ success: false, error: 'Unauthorized' }, 401);
    }

    const { data: { user }, error: authError } = await supabase.auth.getUser(accessToken);
    
    if (authError || !user || user.email !== 'diary@leadshunter.biz') {
      return c.json({ success: false, error: 'Access denied. Super admin only.' }, 403);
    }

    console.log('Fetching all users for admin...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles = await kv.getByPrefix('profile:');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersWithStats = await Promise.all(
      profiles.map(async (profile) => {
        const entries = await kv.get(`entries:${profile.id}`) || [];
        const entriesCount = Array.isArray(entries) ? entries.length : 0;
        
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        let lastActivity = null;
        if (Array.isArray(entries) && entries.length > 0) {
          const sortedEntries = entries.sort((a, b) => 
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          );
          lastActivity = sortedEntries[0].createdAt;
        }

        return {
          id: profile.id,
          email: profile.email,
          name: profile.name,
          createdAt: profile.createdAt,
          isPremium: profile.subscriptionStatus === 'active' || profile.isPremium || false,
          entriesCount,
          lastActivity,
          language: profile.language || 'ru'
        };
      })
    );

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    usersWithStats.sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );

    console.log(`Retrieved ${usersWithStats.length} users`);

    return c.json({
      success: true,
      users: usersWithStats,
      total: usersWithStats.length
    });

  } catch (error) {
    console.error('Error fetching users:', error);
    return c.json({ 
      success: false, 
      error: `Failed to fetch users: ${error.message}` 
    }, 500);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
Deno.serve(app.fetch);
