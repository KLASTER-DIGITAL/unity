import { LanguageConfig, MissingTranslationReport } from './types';
import { TranslationCacheManager } from './cache';

export class I18nAPI {
  private static readonly BASE_URL = '/api/i18n';
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
  static async getSupportedLanguages(): Promise<LanguageConfig[]> {
    try {
      const response = await fetch(`${this.BASE_URL}/languages`, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch languages: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch languages');
      }
      
      return data.languages || [];
    } catch (error) {
      console.error('Error fetching supported languages:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —è–∑—ã–∫–∏
      return this.getFallbackLanguages();
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞
  static async getTranslations(language: string, options?: {
    useCache?: boolean;
    etag?: string;
  }): Promise<Record<string, string>> {
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º ETag –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      if (options?.etag) {
        headers['If-None-Match'] = options.etag;
      }
      
      const response = await fetch(`${this.BASE_URL}/translations/${language}`, {
        headers,
      });
      
      if (response.status === 304) {
        // –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        const cached = TranslationCacheManager.getCache(language);
        if (cached) {
          console.log(`Using cached translations for ${language}`);
          return cached.translations;
        }
        // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      }
      
      if (!response.ok) {
        throw new Error(`Failed to fetch translations: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch translations');
      }
      
      const etag = response.headers.get('ETag');
      const translations = data.translations || {};
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å ETag
      if (options?.useCache !== false) {
        TranslationCacheManager.setCache(language, translations, etag || undefined);
      }
      
      console.log(`Loaded ${Object.keys(translations).length} translations for ${language}`);
      return translations;
    } catch (error) {
      console.error(`Error fetching translations for ${language}:`, error);
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const cached = TranslationCacheManager.getCache(language);
      if (cached) {
        console.log(`Using cached translations for ${language} due to API error`);
        return cached.translations;
      }
      
      throw error;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  static async getTranslationKeys(): Promise<string[]> {
    try {
      const response = await fetch(`${this.BASE_URL}/keys`, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch keys: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch keys');
      }
      
      return data.keys || [];
    } catch (error) {
      console.error('Error fetching translation keys:', error);
      return this.getFallbackKeys();
    }
  }
  
  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ
  static async reportMissingTranslation(
    key: string,
    language: string,
    context?: string
  ): Promise<void> {
    try {
      const report: MissingTranslationReport = {
        key,
        language,
        context,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString()
      };
      
      const response = await fetch(`${this.BASE_URL}/missing`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(report)
      });
      
      if (!response.ok) {
        console.warn(`Failed to report missing translation: ${response.status}`);
      }
    } catch (error) {
      console.error('Error reporting missing translation:', error);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
  static async getTranslationStats(): Promise<{
    totalKeys: number;
    translatedKeys: Record<string, number>;
    progress: Record<string, number>;
    lastUpdated: Record<string, string>;
  }> {
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      const response = await fetch(`${this.BASE_URL}/admin/stats`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch stats: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch stats');
      }
      
      return data.stats;
    } catch (error) {
      console.error('Error fetching translation stats:', error);
      return {
        totalKeys: 0,
        translatedKeys: {},
        progress: {},
        lastUpdated: {}
      };
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
  static async updateTranslations(
    language: string,
    translations: Record<string, string>
  ): Promise<boolean> {
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      const response = await fetch(`${this.BASE_URL}/admin/translations`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          language,
          translations
        })
      });
      
      if (!response.ok) {
        throw new Error(`Failed to update translations: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to update translations');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      TranslationCacheManager.setCache(language, translations);
      
      return true;
    } catch (error) {
      console.error('Error updating translations:', error);
      return false;
    }
  }
  
  // –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ OpenAI (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
  static async autoTranslate(
    sourceLanguage: string,
    targetLanguages: string[]
  ): Promise<{
    success: boolean;
    results: Record<string, Array<{
      key: string;
      originalText: string;
      translatedText: string;
      confidence: number;
      needsReview: boolean;
    }>>;
    error?: string;
  }> {
    try {
      const token = localStorage.getItem('sb-ecuwuzqlwdkkdncampnc-auth-token');
      const openaiApiKey = localStorage.getItem('admin_openai_api_key');
      
      if (!openaiApiKey) {
        throw new Error('OpenAI API key not configured');
      }
      
      const response = await fetch(`${this.BASE_URL}/admin/translate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          'X-OpenAI-Key': openaiApiKey,
        },
        body: JSON.stringify({
          sourceLanguage,
          targetLanguages
        })
      });
      
      if (!response.ok) {
        throw new Error(`Auto-translation failed: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.error || 'Auto-translation failed');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
      for (const language of targetLanguages) {
        const translations = data.results[language]?.reduce((acc: Record<string, string>, result: any) => {
          acc[result.key] = result.translatedText;
          return acc;
        }, {});
        
        if (translations && Object.keys(translations).length > 0) {
          TranslationCacheManager.setCache(language, translations);
        }
      }
      
      return {
        success: true,
        results: data.results
      };
    } catch (error) {
      console.error('Error in auto-translation:', error);
      return {
        success: false,
        results: {},
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  static async healthCheck(): Promise<boolean> {
    try {
      const response = await fetch(`${this.BASE_URL}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      return response.ok;
    } catch (error) {
      console.error('API health check failed:', error);
      return false;
    }
  }
  
  // Fallback –¥–∞–Ω–Ω—ã–µ
  private static getFallbackLanguages(): LanguageConfig[] {
    return [
      { code: 'ru', name: 'Russian', native_name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', is_active: true },
      { code: 'en', name: 'English', native_name: 'English', flag: 'üá∫üá∏', is_active: true },
      { code: 'es', name: 'Spanish', native_name: 'Espa√±ol', flag: 'üá™üá∏', is_active: true },
      { code: 'de', name: 'German', native_name: 'Deutsch', flag: 'üá©üá™', is_active: false },
      { code: 'fr', name: 'French', native_name: 'Fran√ßais', flag: 'üá´üá∑', is_active: false },
      { code: 'zh', name: 'Chinese', native_name: '‰∏≠Êñá', flag: 'üá®üá≥', is_active: false },
      { code: 'ja', name: 'Japanese', native_name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', is_active: false },
    ];
  }
  
  private static getFallbackKeys(): string[] {
    return [
      'welcome_title', 'start_button', 'skip', 'next', 'back',
      'home', 'history', 'achievements', 'reports', 'settings',
      'greeting', 'today_question', 'input_placeholder',
      'send', 'save', 'cancel_button', 'delete',
      'sign_in', 'sign_up', 'your_email', 'password',
      'notifications', 'language', 'support',
      'family', 'work', 'finance', 'gratitude', 'health',
      'personal_development', 'creativity', 'relationships',
      'connected_to_ai', 'ai_help', 'history_title',
      'select_language', 'diary_name', 'first_entry', 'reminders'
    ];
  }
}

