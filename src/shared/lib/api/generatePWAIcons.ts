/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PWA –∏–∫–æ–Ω–æ–∫
 * –°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ —ç–º–æ–¥–∑–∏
 */

export function generatePWAIcon(size: number, emoji: string = 'üèÜ'): Promise<Blob> {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('Could not get canvas context'));
      return;
    }
    
    // –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    const gradient = ctx.createLinearGradient(0, 0, size, size);
    gradient.addColorStop(0, '#007AFF');
    gradient.addColorStop(1, '#0051D5');
    ctx.fillStyle = gradient;
    
    // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
    const radius = size * 0.2;
    ctx.beginPath();
    ctx.moveTo(radius, 0);
    ctx.lineTo(size - radius, 0);
    ctx.quadraticCurveTo(size, 0, size, radius);
    ctx.lineTo(size, size - radius);
    ctx.quadraticCurveTo(size, size, size - radius, size);
    ctx.lineTo(radius, size);
    ctx.quadraticCurveTo(0, size, 0, size - radius);
    ctx.lineTo(0, radius);
    ctx.quadraticCurveTo(0, 0, radius, 0);
    ctx.closePath();
    ctx.fill();
    
    // –≠–º–æ–¥–∑–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
    const fontSize = size * 0.55;
    ctx.font = `${fontSize}px Arial`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // –ù–µ–±–æ–ª—å—à–∞—è —Ç–µ–Ω—å –¥–ª—è —ç–º–æ–¥–∑–∏
    ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';
    ctx.shadowBlur = size * 0.02;
    ctx.shadowOffsetY = size * 0.01;
    
    ctx.fillText(emoji, size / 2, size / 2);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ blob
    canvas.toBlob((blob) => {
      if (blob) {
        resolve(blob);
      } else {
        reject(new Error('Failed to create blob'));
      }
    }, 'image/png');
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è PWA
 */
export async function generateAllPWAIcons(): Promise<void> {
  const sizes = [192, 512];
  
  for (const size of sizes) {
    try {
      const blob = await generatePWAIcon(size);
      const url = URL.createObjectURL(blob);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º link —ç–ª–µ–º–µ–Ω—Ç—ã
      updateIconLink(size, url);
      
      console.log(`Generated PWA icon: ${size}x${size}`);
    } catch (error) {
      console.error(`Failed to generate icon ${size}x${size}:`, error);
    }
  }
}

function updateIconLink(size: number, url: string) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∏–∫–æ–Ω–∫—É
  let iconLink = document.querySelector(`link[rel="icon"][sizes="${size}x${size}"]`) as HTMLLinkElement;
  if (!iconLink) {
    iconLink = document.createElement('link');
    iconLink.rel = 'icon';
    iconLink.type = 'image/png';
    iconLink.sizes = `${size}x${size}`;
    document.head.appendChild(iconLink);
  }
  iconLink.href = url;
  
  // –î–ª—è 192px —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º apple-touch-icon
  if (size === 192) {
    let appleIconLink = document.querySelector('link[rel="apple-touch-icon"]') as HTMLLinkElement;
    if (!appleIconLink) {
      appleIconLink = document.createElement('link');
      appleIconLink.rel = 'apple-touch-icon';
      document.head.appendChild(appleIconLink);
    }
    appleIconLink.href = url;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è PWA (–¥–ª—è app stores)
 */
export async function generatePWAScreenshot(width: number = 390, height: number = 844): Promise<Blob> {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('Could not get canvas context'));
      return;
    }
    
    // –ë–µ–ª—ã–π —Ñ–æ–Ω
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, width, height);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
    ctx.fillStyle = '#007AFF';
    ctx.font = '24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('–î–Ω–µ–≤–Ω–∏–∫ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π', width / 2, height / 2);
    
    canvas.toBlob((blob) => {
      if (blob) {
        resolve(blob);
      } else {
        reject(new Error('Failed to create screenshot blob'));
      }
    }, 'image/png');
  });
}
