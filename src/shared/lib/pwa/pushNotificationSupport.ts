/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Push Notifications –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Push Notifications:
 * - Chrome/Edge (Desktop & Android): ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 * - Firefox (Desktop & Android): ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 * - Safari (Desktop): ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å macOS 13+ (Ventura)
 * - Safari (iOS): ‚ùå –ù–ï–¢ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (iOS 16.4+ —Ç–æ–ª—å–∫–æ Web Push API, –Ω–æ –ù–ï Service Worker Push)
 * - Opera (Desktop & Android): ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 * - Samsung Internet: ‚úÖ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
 */

export interface BrowserInfo {
  name: string;
  version: string;
  os: string;
  isMobile: boolean;
}

export interface PushSupportInfo {
  isSupported: boolean;
  reason?: string;
  browserInfo: BrowserInfo;
  features: {
    serviceWorker: boolean;
    pushManager: boolean;
    notifications: boolean;
    permissions: boolean;
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export function getBrowserInfo(): BrowserInfo {
  const ua = navigator.userAgent;
  const isMobile = /Mobile|Android|iPhone|iPad|iPod/i.test(ua);
  
  let name = 'Unknown';
  let version = 'Unknown';
  let os = 'Unknown';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º OS
  if (/Windows/i.test(ua)) os = 'Windows';
  else if (/Mac OS X/i.test(ua)) os = 'macOS';
  else if (/Linux/i.test(ua)) os = 'Linux';
  else if (/Android/i.test(ua)) os = 'Android';
  else if (/iPhone|iPad|iPod/i.test(ua)) os = 'iOS';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
  if (/Edg\//i.test(ua)) {
    name = 'Edge';
    version = ua.match(/Edg\/(\d+)/)?.[1] || 'Unknown';
  } else if (/Chrome/i.test(ua) && !/Edg/i.test(ua)) {
    name = 'Chrome';
    version = ua.match(/Chrome\/(\d+)/)?.[1] || 'Unknown';
  } else if (/Firefox/i.test(ua)) {
    name = 'Firefox';
    version = ua.match(/Firefox\/(\d+)/)?.[1] || 'Unknown';
  } else if (/Safari/i.test(ua) && !/Chrome/i.test(ua)) {
    name = 'Safari';
    version = ua.match(/Version\/(\d+)/)?.[1] || 'Unknown';
  } else if (/OPR\//i.test(ua)) {
    name = 'Opera';
    version = ua.match(/OPR\/(\d+)/)?.[1] || 'Unknown';
  } else if (/SamsungBrowser/i.test(ua)) {
    name = 'Samsung Internet';
    version = ua.match(/SamsungBrowser\/(\d+)/)?.[1] || 'Unknown';
  }

  return { name, version, os, isMobile };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Push Notifications
 */
export function checkPushSupport(): PushSupportInfo {
  const browserInfo = getBrowserInfo();
  
  const features = {
    serviceWorker: 'serviceWorker' in navigator,
    pushManager: 'PushManager' in window,
    notifications: 'Notification' in window,
    permissions: 'permissions' in navigator,
  };

  // iOS Safari - –ù–ï–¢ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Service Worker Push
  if (browserInfo.os === 'iOS') {
    return {
      isSupported: false,
      reason: 'iOS Safari –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Push Notifications —á–µ—Ä–µ–∑ Service Worker. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ Web Push API (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞).',
      browserInfo,
      features,
    };
  }

  // Safari –Ω–∞ macOS - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è 16+
  if (browserInfo.name === 'Safari' && browserInfo.os === 'macOS') {
    const version = parseInt(browserInfo.version);
    if (version < 16) {
      return {
        isSupported: false,
        reason: `Safari ${browserInfo.version} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Push Notifications. –¢—Ä–µ–±—É–µ—Ç—Å—è Safari 16+ (macOS Ventura –∏–ª–∏ –Ω–æ–≤–µ–µ).`,
        browserInfo,
        features,
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API
  if (!features.serviceWorker) {
    return {
      isSupported: false,
      reason: 'Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.',
      browserInfo,
      features,
    };
  }

  if (!features.pushManager) {
    return {
      isSupported: false,
      reason: 'Push Manager API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.',
      browserInfo,
      features,
    };
  }

  if (!features.notifications) {
    return {
      isSupported: false,
      reason: 'Notifications API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.',
      browserInfo,
      features,
    };
  }

  // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
  return {
    isSupported: true,
    browserInfo,
    features,
  };
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ Push Notifications
 */
export async function requestPushPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    throw new Error('Notifications API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  }

  const permission = await Notification.requestPermission();
  console.log('[Push] Permission result:', permission);
  return permission;
}

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ Push Notifications
 */
export async function subscribeToPush(vapidPublicKey: string): Promise<PushSubscription> {
  const support = checkPushSupport();
  
  if (!support.isSupported) {
    throw new Error(support.reason || 'Push Notifications –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  if (Notification.permission !== 'granted') {
    const permission = await requestPushPermission();
    if (permission !== 'granted') {
      throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º Service Worker registration
  const registration = await navigator.serviceWorker.ready;
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Push
  const subscription = await registration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(vapidPublicKey),
  });

  console.log('[Push] Subscription created:', subscription);
  return subscription;
}

/**
 * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç Push Notifications
 */
export async function unsubscribeFromPush(): Promise<boolean> {
  const registration = await navigator.serviceWorker.ready;
  const subscription = await registration.pushManager.getSubscription();
  
  if (subscription) {
    const result = await subscription.unsubscribe();
    console.log('[Push] Unsubscribed:', result);
    return result;
  }
  
  return false;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
 */
export async function getCurrentSubscription(): Promise<PushSubscription | null> {
  if (!('serviceWorker' in navigator)) {
    return null;
  }

  const registration = await navigator.serviceWorker.ready;
  return await registration.pushManager.getSubscription();
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–æ–µ, –Ω–µ —á–µ—Ä–µ–∑ Push API)
 */
export async function sendTestNotification(title: string, body: string, icon?: string): Promise<void> {
  if (!('Notification' in window)) {
    throw new Error('Notifications API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  }

  if (Notification.permission !== 'granted') {
    const permission = await requestPushPermission();
    if (permission !== 'granted') {
      throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å Service Worker, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;
    await registration.showNotification(title, {
      body,
      icon: icon || '/icon-192x192.png',
      badge: '/icon-96x96.png',
      // vibrate: [200, 100, 200], // Not supported in NotificationOptions type
      tag: 'test-notification',
      requireInteraction: false,
    } as any);
  } else {
    // Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    new Notification(title, {
      body,
      icon: icon || '/icon-192x192.png',
    });
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç VAPID –∫–ª—é—á –∏–∑ base64 –≤ Uint8Array
 */
function urlBase64ToUint8Array(base64String: string): Uint8Array {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/\-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ Push –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
 */
export function getPushRecommendations(): string[] {
  const support = checkPushSupport();
  const recommendations: string[] = [];

  if (support.isSupported) {
    recommendations.push('‚úÖ –í–∞—à –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Push Notifications');
    recommendations.push('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  } else {
    recommendations.push(`‚ùå ${support.reason}`);
    
    if (support.browserInfo.os === 'iOS') {
      recommendations.push('üí° –î–ª—è iOS —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      recommendations.push('üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, SMS)');
    } else if (support.browserInfo.name === 'Safari') {
      recommendations.push('üí° –û–±–Ω–æ–≤–∏—Ç–µ Safari –¥–æ –≤–µ—Ä—Å–∏–∏ 16+ (macOS Ventura)');
      recommendations.push('üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome/Firefox –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
    } else {
      recommendations.push('üí° –û–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏');
      recommendations.push('üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome/Firefox/Edge');
    }
  }

  return recommendations;
}

