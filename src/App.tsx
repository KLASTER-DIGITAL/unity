import { useState, useEffect, Suspense, lazy } from "react";
import { checkSession, signOut } from "./utils/auth";
import { ThemeProvider } from "@/shared/components/theme-provider";
import { setUser, addBreadcrumb } from "@/shared/lib/monitoring";
import { LottiePreloader } from "@/shared/components/LottiePreloader";

// Lazy load app-level components for code splitting
const MobileApp = lazy(() => import("@/app/mobile").then(module => ({ default: module.MobileApp })));
const AdminApp = lazy(() => import("@/app/admin").then(module => ({ default: module.AdminApp })));

// PWA Components - Lazy loaded –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const PWAHead = lazy(() => import("@/shared/components/pwa").then(m => ({ default: m.PWAHead })));
const PWASplash = lazy(() => import("@/shared/components/pwa").then(m => ({ default: m.PWASplash })));
const PWAStatus = lazy(() => import("@/shared/components/pwa").then(m => ({ default: m.PWAStatus })));
const PWAUpdatePrompt = lazy(() => import("@/shared/components/pwa").then(m => ({ default: m.PWAUpdatePrompt })));
const InstallPrompt = lazy(() => import("@/shared/components/pwa").then(m => ({ default: m.InstallPrompt })));

import { usePWASettings, shouldShowInstallPrompt, incrementVisitCount } from "@/shared/hooks/usePWASettings";
import { markInstallPromptAsShown } from "@/shared/lib/api/pwaUtils";
import {
  initPWAAnalytics,
  trackInstallPromptShown,
  trackInstallAccepted,
  trackInstallDismissed,
} from "@/shared/lib/analytics/pwa-tracking";
import { useInitPushAnalytics } from "@/shared/hooks/usePushAnalytics";

// Import E2E test component
import { I18nE2ETest } from "@/shared/lib/i18n/I18nE2ETest";
import { PerformanceDashboard } from "@/shared/lib/i18n/monitoring/PerformanceDashboard";

// Onboarding data interface
interface OnboardingData {
  language: string;
  diaryName: string;
  diaryEmoji: string;
  notificationSettings: {
    selectedTime: 'none' | 'morning' | 'evening' | 'both';
    morningTime: string;
    eveningTime: string;
    permissionGranted: boolean;
  };
  firstEntry: string;
}

export default function App() {
  const [currentStep, setCurrentStep] = useState(1);
  const [onboardingComplete, setOnboardingComplete] = useState(false);
  const [userData, setUserData] = useState<any>(null);
  const [isCheckingSession, setIsCheckingSession] = useState(true);
  const [minLoadingTimeElapsed, setMinLoadingTimeElapsed] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState("ru");
  const [isAdminRoute, setIsAdminRoute] = useState(false);
  const [showAdminAuth, setShowAdminAuth] = useState(false);
  const [showAuth, setShowAuth] = useState(false);
  const [authMode, setAuthMode] = useState<'login' | 'register'>('register');

  // PWA state
  const { settings: pwaSettings, isLoading: isPWALoading } = usePWASettings();
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);

  // Onboarding data state
  const [onboardingData, setOnboardingData] = useState<OnboardingData>({
    language: 'ru',
    diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
    diaryEmoji: 'üèÜ',
    notificationSettings: {
      selectedTime: 'none',
      morningTime: '08:00',
      eveningTime: '21:00',
      permissionGranted: false
    },
    firstEntry: ''
  });

  // Check for test route
  const [isTestRoute, setIsTestRoute] = useState(false);
  const [isPerformanceRoute, setIsPerformanceRoute] = useState(false);

  // Check admin route ONLY via query parameter (NO auto-redirect based on role)
  useEffect(() => {
    const checkAdminRoute = () => {
      const urlParams = new URLSearchParams(window.location.search);
      const isAdminParam = urlParams.get('view') === 'admin';
      const isTestParam = urlParams.get('view') === 'test';
      const isPerformanceParam = urlParams.get('view') === 'performance';

      // Set test route
      setIsTestRoute(isTestParam);
      setIsPerformanceRoute(isPerformanceParam);

      // Set admin route ONLY if query param is present
      setIsAdminRoute(isAdminParam);

      // üîí SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (userData !== null)
      if (userData && !isCheckingSession) {
        const userRole = userData.profile?.role || userData.role;

        if (isAdminParam && userRole !== 'super_admin') {
          // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
          console.log("üö´ Access denied: user role is not super_admin, redirecting to PWA");
          window.location.href = '/';
          return;
        }

        if (!isAdminParam && !isTestParam && !isPerformanceParam && userRole === 'super_admin') {
          // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å PWA –∫–∞–±–∏–Ω–µ—Ç
          console.log("üö´ Access denied: super_admin cannot access PWA, redirecting to admin panel");
          window.location.href = '/?view=admin';
          return;
        }
      }

      // Show/hide admin auth screen based on session
      if (isAdminParam && !userData) {
        setShowAdminAuth(true);
      } else if (isAdminParam && userData) {
        // User is authenticated, hide auth screen
        setShowAdminAuth(false);
      }
    };

    checkAdminRoute();
    window.addEventListener('popstate', checkAdminRoute);
    window.addEventListener('hashchange', checkAdminRoute);

    return () => {
      window.removeEventListener('popstate', checkAdminRoute);
      window.removeEventListener('hashchange', checkAdminRoute);
    };
  }, [userData, isCheckingSession]);

  // Check session on mount
  useEffect(() => {
    const initSession = async () => {
      try {
        const session = await checkSession();
        console.log("üîç Session check result:", session);

        // Check if session is successful (has user data)
        if (session && session.success !== false && session.user) {
          setUserData(session);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Sentry –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
          setUser({
            id: session.user.id,
            email: session.user.email,
            username: session.profile?.name || session.user.email,
          });

          addBreadcrumb({
            category: 'auth',
            message: 'User session restored',
            level: 'info',
            data: {
              role: session.profile?.role || session.role,
            },
          });

          // üîí SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
          const urlParams = new URLSearchParams(window.location.search);
          const isAdminView = urlParams.get('view') === 'admin';
          const userRole = session.profile?.role || session.role;

          if (isAdminView && userRole !== 'super_admin') {
            // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            console.log("üö´ Access denied: user role is not super_admin, redirecting to PWA");
            window.location.href = '/';
            return;
          }

          if (!isAdminView && userRole === 'super_admin') {
            // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å PWA –∫–∞–±–∏–Ω–µ—Ç
            console.log("üö´ Access denied: super_admin cannot access PWA, redirecting to admin panel");
            window.location.href = '/?view=admin';
            return;
          }

          // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (session.profile?.language) {
            console.log("üåê Loading user language from profile:", session.profile.language);
            setSelectedLanguage(session.profile.language);
            setOnboardingData(prev => ({ ...prev, language: session.profile.language }));
          }

          // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º onboardingCompleted –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          if (session.profile?.onboardingCompleted) {
            console.log("‚úÖ Onboarding complete, going to step 5");
            setOnboardingComplete(true);
            setCurrentStep(5);
          } else {
            console.log("‚ö†Ô∏è Session exists but onboarding not complete, going to step 2");
            setCurrentStep(2);
          }
        } else {
          console.log("‚ÑπÔ∏è No session found, staying at step 1 (WelcomeScreen)");
          // Explicitly stay at step 1 for WelcomeScreen
          setCurrentStep(1);
        }
      } catch (error) {
        console.error("Session check error:", error);
        // On error, also stay at step 1
        setCurrentStep(1);
      } finally {
        setIsCheckingSession(false);
      }
    };

    initSession();
  }, []);

  // PWA Install Prompt Logic
  useEffect(() => {
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –≤–∏–∑–∏—Ç–æ–≤
    incrementVisitCount();

    // –°–ª—É—à–∞–µ–º beforeinstallprompt event
    const handleBeforeInstallPrompt = (e: any) => {
      console.log('[PWA] beforeinstallprompt event fired');
      e.preventDefault();
      setDeferredPrompt(e);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å install prompt
    if (!isPWALoading) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
      let currentLocation: 'onboarding' | 'user_cabinet' | undefined;

      if (!userData) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω = –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        currentLocation = 'onboarding';
      } else if (userData && onboardingComplete) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏ –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ = –∫–∞–±–∏–Ω–µ—Ç
        currentLocation = 'user_cabinet';
      }

      const shouldShow = shouldShowInstallPrompt(pwaSettings, currentLocation);
      console.log('[PWA] Should show install prompt:', shouldShow, 'location:', currentLocation, pwaSettings);

      if (shouldShow) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        setTimeout(() => {
          setShowInstallPrompt(true);
          // Track –ø–æ–∫–∞–∑ install prompt
          trackInstallPromptShown(userData?.id || null);
        }, 1000);
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PWA analytics
    initPWAAnalytics(userData?.id || null);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, [isPWALoading, pwaSettings, userData, onboardingComplete]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Push Analytics
  useInitPushAnalytics(userData?.id);

  // PWA Install Handlers
  const handleInstall = async () => {
    console.log('[PWA] Install button clicked');

    if (deferredPrompt) {
      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;
      console.log(`[PWA] User response: ${outcome}`);

      if (outcome === 'accepted') {
        console.log('[PWA] User accepted the install prompt');
        // Track —É—Å—Ç–∞–Ω–æ–≤–∫—É PWA
        trackInstallAccepted(userData?.id || null);
      } else {
        console.log('[PWA] User dismissed the install prompt');
        // Track –æ—Ç–∫–∞–∑ –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        trackInstallDismissed(userData?.id || null, 'user_declined');
      }

      setDeferredPrompt(null);
    } else {
      console.log('[PWA] No deferred prompt available (iOS or already installed)');
    }

    markInstallPromptAsShown();
    setShowInstallPrompt(false);
  };

  const handleInstallClose = () => {
    // Track –∑–∞–∫—Ä—ã—Ç–∏–µ install prompt
    trackInstallDismissed(userData?.id || null, 'user_closed');
    console.log('[PWA] Install prompt closed');
    markInstallPromptAsShown();
    setShowInstallPrompt(false);
  };

  const handleWelcomeComplete = (language: string) => {
    setSelectedLanguage(language);
    setOnboardingData(prev => ({ ...prev, language }));
    setCurrentStep(2);
  };

  const handleWelcomeSkip = () => {
    setAuthMode('login'); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–æ–π—Ç–∏
    setShowAuth(true);
  };

  const handleOnboarding2Complete = () => {
    setCurrentStep(3);
  };

  const handleOnboarding3Complete = (diaryName: string, emoji: string) => {
    setOnboardingData(prev => ({
      ...prev,
      diaryName,
      diaryEmoji: emoji
    }));
    setCurrentStep(4);
  };

  const handleOnboarding4Complete = (firstEntry: string, settings: any) => {
    setOnboardingData(prev => ({
      ...prev,
      firstEntry,
      notificationSettings: settings
    }));
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º AuthScreen —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    setAuthMode('register'); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    setShowAuth(true);
  };

  const handleAuthComplete = async (user: any) => {
    setUserData(user);
    setShowAuth(false);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Sentry
    setUser({
      id: user.user?.id || user.id,
      email: user.user?.email || user.email,
      username: user.profile?.name || user.name || user.email,
    });

    addBreadcrumb({
      category: 'auth',
      message: 'User authenticated',
      level: 'info',
      data: {
        role: user.profile?.role || user.role,
        onboardingCompleted: user.onboardingCompleted,
      },
    });

    if (user.onboardingCompleted) {
      setOnboardingComplete(true);
      setCurrentStep(5);
    } else {
      setCurrentStep(2);
    }
  };

  // PWA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–û–õ–ù–´–ô –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç welcome screen)
  const handleLogout = async () => {
    console.log("üö™ [App.tsx] PWA user full logout - clearing session for welcome screen");

    addBreadcrumb({
      category: 'auth',
      message: 'PWA user logged out',
      level: 'info',
    });

    await signOut(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å welcome screen
    setUser(null); // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Sentry
    setUserData(null);
    setOnboardingComplete(false);
    setCurrentStep(1); // –í–æ–∑–≤—Ä–∞—Ç –∫ welcome screen
    setShowAdminAuth(false);
  };

  // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const handleAdminLogout = async () => {
    console.log("üîê [App.tsx] Admin logout - clearing session for security");

    addBreadcrumb({
      category: 'auth',
      message: 'Admin logged out',
      level: 'info',
    });

    await signOut(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    setUser(null); // –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Sentry
    setUserData(null);
    setOnboardingComplete(false);
    setCurrentStep(1);
    setShowAdminAuth(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞
  };

  const handleAdminAuthComplete = (adminUser: any) => {
    console.log("üîê [App.tsx] Admin auth complete:", adminUser.email, "role:", adminUser.role);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ Sentry
    setUser({
      id: adminUser.id,
      email: adminUser.email,
      username: adminUser.profile?.name || adminUser.email,
    });

    addBreadcrumb({
      category: 'auth',
      message: 'Admin authenticated',
      level: 'info',
      data: {
        role: adminUser.role,
      },
    });

    setUserData(adminUser);
    setShowAdminAuth(false);
    setIsCheckingSession(false); // ‚úÖ FIX: Stop showing loading screen after admin login
  };

  const handleProfileUpdate = (updatedProfile: any) => {
    console.log('üîÑ [App.tsx] Updating userData with new profile:', updatedProfile);
    setUserData((prev: any) => ({
      ...prev,
      profile: updatedProfile
    }));
  };

  // Admin view
  if (isAdminRoute) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ò –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if (isCheckingSession || !minLoadingTimeElapsed) {
      return (
        <ThemeProvider defaultTheme="light" storageKey="unity-theme">
          <LottiePreloader
            showMessage={false}
            minDuration={5000}
            onMinDurationComplete={() => setMinLoadingTimeElapsed(true)}
            size="lg"
          />
        </ThemeProvider>
      );
    }

    return (
      <ThemeProvider defaultTheme="light" storageKey="unity-theme">
        <AdminApp
          userData={userData}
          showAdminAuth={showAdminAuth}
          onAuthComplete={handleAdminAuthComplete}
          onLogout={handleAdminLogout} // –ò—Å–ø–æ–ª—å–∑—É–µ–º handleAdminLogout –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
          onBack={() => {
            window.location.href = '/';
          }}
        />
      </ThemeProvider>
    );
  }

  // Mobile view - loading state
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ò –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  if (isCheckingSession || !minLoadingTimeElapsed) {
    return (
      <ThemeProvider defaultTheme="light" storageKey="unity-theme">
        <div className="max-w-md mx-auto">
          <LottiePreloader
            showMessage={false}
            minDuration={5000}
            onMinDurationComplete={() => setMinLoadingTimeElapsed(true)}
            size="lg"
          />
        </div>
      </ThemeProvider>
    );
  }

  // Test route
  if (isTestRoute) {
    return (
      <ThemeProvider defaultTheme="light" storageKey="unity-theme">
        <I18nE2ETest />
      </ThemeProvider>
    );
  }

  // Performance dashboard route
  if (isPerformanceRoute) {
    return (
      <ThemeProvider defaultTheme="light" storageKey="unity-theme">
        <PerformanceDashboard />
      </ThemeProvider>
    );
  }

  return (
    <>
      <ThemeProvider defaultTheme="light" storageKey="unity-theme">
        {/* PWA Components - Lazy loaded —Å Suspense –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
        <Suspense fallback={null}>
          {/* PWA Head - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ meta tags */}
          <PWAHead />

          {/* PWA Splash Screen - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤ standalone */}
          <PWASplash />

          {/* PWA Status - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ */}
          <PWAStatus />

          {/* PWA Update Prompt - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker */}
          <PWAUpdatePrompt />

          {/* Install Prompt - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å */}
          {showInstallPrompt && (
            <InstallPrompt
              onClose={handleInstallClose}
              onInstall={handleInstall}
            />
          )}
        </Suspense>

        <MobileApp
          userData={userData}
          onboardingComplete={onboardingComplete}
          currentStep={currentStep}
          selectedLanguage={selectedLanguage}
          showAuth={showAuth}
          authMode={authMode}
          onboardingData={onboardingData}
          onWelcomeComplete={handleWelcomeComplete}
          onWelcomeSkip={handleWelcomeSkip}
          onOnboarding2Complete={handleOnboarding2Complete}
          onOnboarding3Complete={handleOnboarding3Complete}
          onOnboarding4Complete={handleOnboarding4Complete}
          onAuthComplete={handleAuthComplete}
          onLogout={handleLogout}
          onProfileUpdate={handleProfileUpdate}
        />
      </ThemeProvider>
    </>
  );
}

