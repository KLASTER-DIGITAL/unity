import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "motion/react";
import { signUpWithEmail, signInWithEmail, signInWithGoogle, signInWithFacebook, signInWithApple, signInWithTelegram } from "@/utils/auth";
import { createClient } from "@/utils/supabase/client";
import { getUserProfile } from "@/utils/api";
import { toast } from "sonner";
import { imgEllipse, imgApple, imgGroup659 } from "@/imports/svg-ok0q3";
import { facebookIconSvg } from "@/imports/social-icons";
import { imgTelegramSvgrepoCom1 } from "@/imports/svg-jjwu7";
import TelegramLoginButton from 'react-telegram-login';

// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è AuthScreen
const translations = {
  ru: {
    signIn: '–í–æ–π—Ç–∏',
    signUp: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    signInWith: '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑',
    signUpWith: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑',
    yourEmail: '–í–∞—à email',
    yourName: '–í–∞—à–µ –∏–º—è',
    password: '–ü–∞—Ä–æ–ª—å',
    welcomeBack: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    createAccount: '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
    notRegisteredYet: '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?',
    alreadyHaveAccountAuth: '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?',
    back: '–ù–∞–∑–∞–¥'
  },
  en: {
    signIn: 'Sign In',
    signUp: 'Sign Up',
    signInWith: 'Sign in with',
    signUpWith: 'Sign up with',
    yourEmail: 'Your email',
    yourName: 'Your name',
    password: 'Password',
    welcomeBack: 'Welcome back!',
    createAccount: 'Create account',
    notRegisteredYet: 'Not registered yet?',
    alreadyHaveAccountAuth: 'Already have an account?',
    back: 'Back'
  },
  es: {
    signIn: 'Iniciar sesi√≥n',
    signUp: 'Registrarse',
    signInWith: 'Iniciar sesi√≥n con',
    signUpWith: 'Registrarse con',
    yourEmail: 'Tu email',
    yourName: 'Tu nombre',
    password: 'Contrase√±a',
    welcomeBack: '¬°Bienvenido de vuelta!',
    createAccount: 'Crear cuenta',
    notRegisteredYet: '¬øA√∫n no registrado?',
    alreadyHaveAccountAuth: '¬øYa tienes cuenta?',
    back: 'Atr√°s'
  },
  de: {
    signIn: 'Anmelden',
    signUp: 'Registrieren',
    signInWith: 'Anmelden mit',
    signUpWith: 'Registrieren mit',
    yourEmail: 'Deine E-Mail',
    yourName: 'Dein Name',
    password: 'Passwort',
    welcomeBack: 'Willkommen zur√ºck!',
    createAccount: 'Konto erstellen',
    notRegisteredYet: 'Noch nicht registriert?',
    alreadyHaveAccountAuth: 'Bereits ein Konto?',
    back: 'Zur√ºck'
  },
  fr: {
    signIn: 'Se connecter',
    signUp: 'S\'inscrire',
    signInWith: 'Se connecter avec',
    signUpWith: 'S\'inscrire avec',
    yourEmail: 'Ton email',
    yourName: 'Ton nom',
    password: 'Mot de passe',
    welcomeBack: 'Bon retour !',
    createAccount: 'Cr√©er un compte',
    notRegisteredYet: 'Pas encore inscrit ?',
    alreadyHaveAccountAuth: 'D√©j√† un compte ?',
    back: 'Retour'
  },
  zh: {
    signIn: 'ÁôªÂΩï',
    signUp: 'Ê≥®ÂÜå',
    signInWith: '‰ΩøÁî®‰ª•‰∏ãÊñπÂºèÁôªÂΩï',
    signUpWith: '‰ΩøÁî®‰ª•‰∏ãÊñπÂºèÊ≥®ÂÜå',
    yourEmail: '‰Ω†ÁöÑÈÇÆÁÆ±',
    yourName: '‰Ω†ÁöÑÂßìÂêç',
    password: 'ÂØÜÁ†Å',
    welcomeBack: 'Ê¨¢ËøéÂõûÊù•ÔºÅ',
    createAccount: 'ÂàõÂª∫Ë¥¶Êà∑',
    notRegisteredYet: 'ËøòÊ≤°ÊúâÊ≥®ÂÜåÔºü',
    alreadyHaveAccountAuth: 'Â∑≤ÁªèÊúâË¥¶Êà∑‰∫ÜÔºü',
    back: 'ËøîÂõû'
  },
  ja: {
    signIn: '„Çµ„Ç§„É≥„Ç§„É≥',
    signUp: '„Çµ„Ç§„É≥„Ç¢„ÉÉ„Éó',
    signInWith: '„Åß„Çµ„Ç§„É≥„Ç§„É≥',
    signUpWith: '„Åß„Çµ„Ç§„É≥„Ç¢„ÉÉ„Éó',
    yourEmail: '„ÅÇ„Å™„Åü„ÅÆ„É°„Éº„É´',
    yourName: '„ÅÇ„Å™„Åü„ÅÆÂêçÂâç',
    password: '„Éë„Çπ„ÉØ„Éº„Éâ',
    welcomeBack: '„Åä„Åã„Åà„Çä„Å™„Åï„ÅÑÔºÅ',
    createAccount: '„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê',
    notRegisteredYet: '„Åæ„Å†ÁôªÈå≤„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÅãÔºü',
    alreadyHaveAccountAuth: '„Åô„Åß„Å´„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Åô„ÅãÔºü',
    back: 'Êàª„Çã'
  }
};

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
function Ellipse() {
  return (
    <div className="absolute right-4 top-20 w-16 h-12 pointer-events-none z-0">
      <img className="block w-full h-full object-contain" src={imgEllipse} alt="" />
    </div>
  );
}

interface OnboardingData {
  language: string;
  diaryName: string;
  diaryEmoji: string;
  notificationSettings: {
    selectedTime: 'none' | 'morning' | 'evening' | 'both';
    morningTime: string;
    eveningTime: string;
    permissionGranted: boolean;
  };
  firstEntry: string;
}

interface AuthScreenProps {
  onComplete?: (userData: any) => void;
  onAuthComplete?: (userData: any) => void;
  onBack?: () => void;
  showTopBar?: boolean;
  contextText?: string;
  selectedLanguage?: string;
  initialMode?: 'login' | 'register';
  onboardingData?: OnboardingData;
}

export function AuthScreen({
  onComplete,
  onAuthComplete,
  onBack,
  showTopBar = true,
  contextText = "–°–æ—Ö—Ä–∞–Ω–∏–º —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏?",
  selectedLanguage = "ru",
  initialMode = 'register',
  onboardingData
}: AuthScreenProps) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º onAuthComplete –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ onComplete
  const handleComplete = onAuthComplete || onComplete;
  const [isLogin, setIsLogin] = useState(initialMode === 'login');
  const [isLoading, setIsLoading] = useState(false);
  const [isTelegramLoading, setIsTelegramLoading] = useState(false);
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  const currentTranslations = translations[selectedLanguage as keyof typeof translations] || translations.ru;
  
  // Supabase –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
  const supabase = createClient();

  const handleTelegramResponse = async (response: any) => {
    setIsTelegramLoading(true);
    try {
      console.log('Telegram auth data received:', response);
      
      const response_data = await fetch(
        `https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/telegram-auth`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjdXd1enFsd2Rra2RuY2FtcG5jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwNTg2OTQsImV4cCI6MjA3NTYzNDY5NH0.OnBM1BIQMVgJur2nM4gZGDW-PWWwSR92DpJHhPpqB88`,
            'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjdXd1enFsd2Rra2RuY2FtcG5jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwNTg2OTQsImV4cCI6MjA3NTYzNDY5NH0.OnBM1BIQMVgJur2nM4gZGDW-PWWwSR92DpJHhPpqB88'
          },
          body: JSON.stringify({ 
            telegramData: response,
            action: 'auth'
          })
        }
      );

      if (response_data.ok) {
        const data = await response_data.json();
        console.log('Telegram auth response:', data);
        
        if (data.session) {
          await supabase.auth.setSession(data.session);
        }

        toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞! üëã");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const sessionResult = await supabase.auth.getSession();
        if (sessionResult.data.session) {
          // –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
          console.log('Session established, updating app state...');

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            const profile = await getUserProfile(data.user.id);

            const userData = {
              id: data.user.id,
              email: data.user.email,
              name: `${response.first_name} ${response.last_name || ''}`.trim(),
              diaryData: {
                name: profile?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
                emoji: profile?.diaryEmoji || 'üèÜ'
              },
              diaryName: profile?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
              diaryEmoji: profile?.diaryEmoji || 'üèÜ',
              language: profile?.language || selectedLanguage,
              notificationSettings: profile?.notificationSettings || {
                selectedTime: 'none',
                morningTime: '08:00',
                eveningTime: '21:00',
                permissionGranted: false
              },
              onboardingCompleted: profile?.onboardingCompleted || false,
              createdAt: profile?.createdAt || new Date().toISOString(),
              telegramData: {
                id: response.id,
                username: response.username,
                photo_url: response.photo_url
              }
            };

            // –í—ã–∑—ã–≤–∞–µ–º handleComplete —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            handleComplete?.(userData);
          } catch (profileError) {
            console.error('Error loading profile:', profileError);
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            const userData = {
              id: data.user.id,
              email: data.user.email,
              name: `${response.first_name} ${response.last_name || ''}`.trim(),
              diaryData: {
                name: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
                emoji: 'üèÜ'
              },
              diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
              diaryEmoji: 'üèÜ',
              language: selectedLanguage,
              notificationSettings: {
                selectedTime: 'none',
                morningTime: '08:00',
                eveningTime: '21:00',
                permissionGranted: false
              },
              onboardingCompleted: false,
              createdAt: new Date().toISOString(),
              telegramData: {
                id: response.id,
                username: response.username,
                photo_url: response.photo_url
              }
            };

            handleComplete?.(userData);
          }
          return;
        }

        const userData = {
          id: data.user.id,
          email: data.user.email,
          name: `${response.first_name} ${response.last_name || ''}`.trim(),
          diaryData: {
            name: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
            emoji: 'üèÜ'
          },
          diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
          diaryEmoji: 'üèÜ',
          language: selectedLanguage,
          notificationSettings: {
            selectedTime: 'none',
            morningTime: '08:00',
            eveningTime: '21:00',
            permissionGranted: false
          },
          onboardingCompleted: false,
          createdAt: new Date().toISOString(),
          telegramData: {
            id: response.id,
            username: response.username,
            photo_url: response.photo_url
          }
        };

        handleComplete?.(userData);
      } else {
        const errorData = await response_data.json();
        throw new Error(errorData.error || 'Failed to process Telegram authentication');
      }
    } catch (error: any) {
      console.error('Telegram auth error:', error);
      toast.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram", {
        description: error.message
      });
    } finally {
      setIsTelegramLoading(false);
    }
  };

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      if (isLogin) {
        // –í—Ö–æ–¥
        const result = await signInWithEmail(email, password);

        if (result.success && result.user && result.profile) {
          // üîí SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ - —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ PWA
          if (result.profile.role === 'super_admin') {
            toast.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", {
              description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /?view=admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            });
            // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            const supabase = createClient();
            await supabase.auth.signOut();
            setIsLoading(false);
            return;
          }

          toast.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã");
          handleComplete?.({
            id: result.user.id,
            email: result.user.email,
            name: result.profile.name,
            role: result.profile.role, // –î–æ–±–∞–≤–ª—è–µ–º role
            diaryData: {
              name: result.profile.diaryName,
              emoji: result.profile.diaryEmoji
            },
            diaryName: result.profile.diaryName,
            diaryEmoji: result.profile.diaryEmoji,
            language: result.profile.language,
            notificationSettings: result.profile.notificationSettings,
            onboardingCompleted: result.profile.onboardingCompleted, // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            createdAt: result.profile.createdAt
          });
        } else {
          toast.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", {
            description: result.error || "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å"
          });
        }
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const result = await signUpWithEmail(email, password, {
          name: name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          diaryName: onboardingData?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
          diaryEmoji: onboardingData?.diaryEmoji || 'üèÜ',
          language: onboardingData?.language || selectedLanguage,
          notificationSettings: onboardingData?.notificationSettings,
          firstEntry: onboardingData?.firstEntry
        });
        
        if (result.success && result.user && result.profile) {
          const userData = {
            id: result.user.id,
            email: result.user.email,
            name: result.profile.name,
            diaryData: {
              name: result.profile.diaryName,
              emoji: result.profile.diaryEmoji
            },
            diaryName: result.profile.diaryName,
            diaryEmoji: result.profile.diaryEmoji,
            language: result.profile.language,
            notificationSettings: result.profile.notificationSettings,
            onboardingCompleted: result.profile.onboardingCompleted,
            createdAt: result.profile.createdAt
          };

          toast.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! üéâ");
          handleComplete?.(userData);
        } else {
          toast.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", {
            description: result.error || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email"
          });
        }
      }
    } catch (error: any) {
      console.error("Auth error:", error);
      toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", {
        description: error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialAuth = async (provider: string) => {
    setIsLoading(true);
    
    try {
      let result;
      
      switch (provider) {
        case 'google':
          result = await signInWithGoogle();
          toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google...");
          break;
        case 'facebook':
          result = await signInWithFacebook();
          toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Facebook...");
          break;
        case 'telegram':
          // Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Login Widget
          // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onTelegramAuth
          toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...");
          break;
      }
      
      if (!result.success && result.error) {
        toast.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", {
          description: result.error
        });
        setIsLoading(false);
      }
      // OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    } catch (error: any) {
      console.error(`${provider} auth error:`, error);
      toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", {
        description: error.message
      });
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-background relative min-h-screen flex flex-col overflow-x-hidden scrollbar-hide">
      <Ellipse />
      
      <div className="flex-1 flex flex-col justify-start px-6 pt-16 pb-8 relative z-10">
        
        {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç */}
        {!showTopBar && contextText && (
          <motion.div
            className="text-center mb-8"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <p className="text-accent !text-[16px] !font-semibold">{contextText}</p>
          </motion.div>
        )}
        
        {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */}
        <motion.div
          className="text-left mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h1 className="text-[#002055] mb-3">
            {isLogin ? currentTranslations.signIn : currentTranslations.signUp}
          </h1>
          <p className="text-[#868d95] !text-[14px] leading-relaxed max-w-[300px]">
            {isLogin 
              ? currentTranslations.welcomeBack
              : currentTranslations.createAccount
            }
          </p>
        </motion.div>

        {/* –§–æ—Ä–º–∞ */}
        <motion.form
          onSubmit={handleEmailSubmit}
          className="space-y-6 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          {/* Name (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
          {!isLogin && (
            <div className="relative">
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder={currentTranslations.yourName}
                className="w-full h-[60px] px-6 bg-input-background border-2 border-[#756ef3] rounded-[var(--radius)] outline-none transition-all duration-200 placeholder:text-[#848a94] text-[#002055]"
                required
              />
            </div>
          )}

          {/* Email */}
          <div className="relative">
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder={currentTranslations.yourEmail}
              className="w-full h-[60px] px-6 bg-input-background border-2 border-[#756ef3] rounded-[var(--radius)] outline-none transition-all duration-200 placeholder:text-[#848a94] text-[#002055]"
              required
            />
          </div>

          {/* Password */}
          <div className="relative">
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder={currentTranslations.password}
              className="w-full h-[60px] px-6 bg-input-background border-2 border-[#756ef3] rounded-[var(--radius)] outline-none transition-all duration-200 placeholder:text-[#848a94] text-[#002055]"
              required
              minLength={6}
            />
          </div>

          {/* Submit Button */}
          <motion.button
            type="submit"
            disabled={isLoading}
            className="w-full h-12 bg-[#756ef3] text-white rounded-[var(--radius)] shadow-[0px_8px_24px_rgba(117,110,243,0.3)] hover:bg-[#6b62e8] transition-all duration-200 active:scale-98 flex items-center justify-center disabled:opacity-50"
            whileTap={{ scale: isLoading ? 1 : 0.98 }}
          >
            {isLoading ? (
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
            ) : (
              isLogin ? currentTranslations.signIn : currentTranslations.signUp
            )}
          </motion.button>
        </motion.form>

        {/* Social Login */}
        <motion.div
          className="mb-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <p className="text-[#868d95] text-center mb-6 !text-[14px]">
            {isLogin ? currentTranslations.signInWith : currentTranslations.signUpWith}
          </p>
          
          <div className="flex justify-center gap-4">
            {/* Apple */}
            <button 
              type="button" 
              onClick={() => handleSocialAuth('apple')}
              disabled={isLoading}
              className="h-[58px] w-[60px] hover:opacity-80 transition-opacity disabled:opacity-50"
            >
              <img className="block w-full h-full object-cover" src={imgApple} alt="Apple" />
            </button>
            
            {/* Google */}
            <button
              type="button"
              onClick={() => handleSocialAuth('google')}
              disabled={isLoading}
              className="relative h-[58px] w-[60px] bg-card rounded-[var(--radius)] border border-border hover:border-primary transition-all duration-200 disabled:opacity-50"
            >
              <img className="absolute inset-0 m-auto w-6 h-6" src={imgGroup659} alt="Google" />
            </button>

            {/* Facebook */}
            <button 
              type="button"
              onClick={() => handleSocialAuth('facebook')}
              disabled={isLoading}
              className="h-[58px] w-[60px] hover:opacity-80 transition-opacity disabled:opacity-50"
            >
              <img className="block w-full h-full object-cover" src={facebookIconSvg} alt="Facebook" />
            </button>

            {/* Telegram */}
            <div className="relative h-[58px] w-[60px]">
              <TelegramLoginButton
                botName="diary_bookai_bot"
                dataOnauth={handleTelegramResponse}
                buttonSize="large"
                cornerRadius="8"
                requestAccess="write"
                usePic={false}
                lang="ru"
              />
            </div>
          </div>
        </motion.div>

        {/* Toggle Login/Signup */}
        <motion.div
          className="text-center"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <button
            type="button"
            onClick={() => setIsLogin(!isLogin)}
            disabled={isLoading}
            className="!text-[14px] hover:opacity-80 transition-opacity disabled:opacity-50"
          >
            <span className="text-[#868d95]">
              {isLogin ? currentTranslations.notRegisteredYet + ' ' : currentTranslations.alreadyHaveAccountAuth + ' '}
            </span>
            <span className="text-[#756ef3] !font-semibold">
              {isLogin ? currentTranslations.signUp : currentTranslations.signIn}
            </span>
          </button>
        </motion.div>

        {/* Back Button */}
        {onBack && (
          <motion.div
            className="text-center mt-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <button
              type="button"
              onClick={onBack}
              disabled={isLoading}
              className="text-[#868d95] !text-[13px] hover:opacity-80 transition-opacity disabled:opacity-50"
            >
              ‚Üê {currentTranslations.back}
            </button>
          </motion.div>
        )}
      </div>
    </div>
  );
}
