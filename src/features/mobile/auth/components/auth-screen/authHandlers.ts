import { signUpWithEmail, signInWithEmail, signInWithGoogle, signInWithFacebook } from "@/utils/auth";
import { createClient } from "@/utils/supabase/client";
import { getUserProfile } from "@/shared/lib/api";
import { toast } from "sonner";
import type { UserData } from "./types";

interface TelegramAuthParams {
  response: any;
  selectedLanguage: string;
  supabase: ReturnType<typeof createClient>;
  handleComplete?: (userData: UserData) => void;
  setIsTelegramLoading: (loading: boolean) => void;
}

/**
 * Handle Telegram authentication
 */
export async function handleTelegramAuth({
  response,
  selectedLanguage,
  supabase,
  handleComplete,
  setIsTelegramLoading
}: TelegramAuthParams) {
  setIsTelegramLoading(true);
  try {
    console.log('Telegram auth data received:', response);
    
    const response_data = await fetch(
      `https://ecuwuzqlwdkkdncampnc.supabase.co/functions/v1/telegram-auth`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjdXd1enFsd2Rra2RuY2FtcG5jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwNTg2OTQsImV4cCI6MjA3NTYzNDY5NH0.OnBM1BIQMVgJur2nM4gZGDW-PWWwSR92DpJHhPpqB88`,
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjdXd1enFsd2Rra2RuY2FtcG5jIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwNTg2OTQsImV4cCI6MjA3NTYzNDY5NH0.OnBM1BIQMVgJur2nM4gZGDW-PWWwSR92DpJHhPpqB88'
        },
        body: JSON.stringify({ 
          telegramData: response,
          action: 'auth'
        })
      }
    );

    if (response_data.ok) {
      const data = await response_data.json();
      console.log('Telegram auth response:', data);
      
      if (data.session) {
        await supabase.auth.setSession(data.session);
      }

      toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞! üëã");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const sessionResult = await supabase.auth.getSession();
      if (sessionResult.data.session) {
        // –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
        console.log('Session established, updating app state...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          const profile = await getUserProfile(data.user.id);

          const userData: UserData = {
            id: data.user.id,
            email: data.user.email,
            name: `${response.first_name} ${response.last_name || ''}`.trim(),
            diaryData: {
              name: profile?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
              emoji: profile?.diaryEmoji || 'üèÜ'
            },
            diaryName: profile?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
            diaryEmoji: profile?.diaryEmoji || 'üèÜ',
            language: profile?.language || selectedLanguage,
            notificationSettings: profile?.notificationSettings || {
              selectedTime: 'none',
              morningTime: '08:00',
              eveningTime: '21:00',
              permissionGranted: false
            },
            onboardingCompleted: profile?.onboardingCompleted || false,
            createdAt: profile?.createdAt || new Date().toISOString(),
            telegramData: {
              id: response.id,
              username: response.username,
              photo_url: response.photo_url
            }
          };

          // –í—ã–∑—ã–≤–∞–µ–º handleComplete —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          handleComplete?.(userData);
        } catch (profileError) {
          console.error('Error loading profile:', profileError);
          // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          const userData: UserData = {
            id: data.user.id,
            email: data.user.email,
            name: `${response.first_name} ${response.last_name || ''}`.trim(),
            diaryData: {
              name: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
              emoji: 'üèÜ'
            },
            diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
            diaryEmoji: 'üèÜ',
            language: selectedLanguage,
            notificationSettings: {
              selectedTime: 'none',
              morningTime: '08:00',
              eveningTime: '21:00',
              permissionGranted: false
            },
            onboardingCompleted: false,
            createdAt: new Date().toISOString(),
            telegramData: {
              id: response.id,
              username: response.username,
              photo_url: response.photo_url
            }
          };

          handleComplete?.(userData);
        }
        return;
      }

      const userData: UserData = {
        id: data.user.id,
        email: data.user.email,
        name: `${response.first_name} ${response.last_name || ''}`.trim(),
        diaryData: {
          name: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
          emoji: 'üèÜ'
        },
        diaryName: '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
        diaryEmoji: 'üèÜ',
        language: selectedLanguage,
        notificationSettings: {
          selectedTime: 'none',
          morningTime: '08:00',
          eveningTime: '21:00',
          permissionGranted: false
        },
        onboardingCompleted: false,
        createdAt: new Date().toISOString(),
        telegramData: {
          id: response.id,
          username: response.username,
          photo_url: response.photo_url
        }
      };

      handleComplete?.(userData);
    } else {
      const errorData = await response_data.json();
      throw new Error(errorData.error || 'Failed to process Telegram authentication');
    }
  } catch (error: any) {
    console.error('Telegram auth error:', error);
    toast.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram", {
      description: error.message
    });
  } finally {
    setIsTelegramLoading(false);
  }
}

interface EmailAuthParams {
  isLogin: boolean;
  email: string;
  password: string;
  name?: string;
  selectedLanguage: string;
  onboardingData?: any;
  handleComplete?: (userData: UserData) => void;
  setIsLoading: (loading: boolean) => void;
}

/**
 * Handle email authentication (login or signup)
 */
export async function handleEmailAuth({
  isLogin,
  email,
  password,
  name,
  selectedLanguage,
  onboardingData,
  handleComplete,
  setIsLoading
}: EmailAuthParams) {
  setIsLoading(true);
  
  try {
    if (isLogin) {
      // –í—Ö–æ–¥
      const result = await signInWithEmail(email, password);

      if (result.success && result.user && result.profile) {
        // ‚úÖ REMOVED: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ super_admin —É–±—Ä–∞–Ω–∞
        // –¢–µ–ø–µ—Ä—å App.tsx –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç super_admin –Ω–∞ /?view=admin
        // —á–µ—Ä–µ–∑ checkAccessAndRedirect() –≤ useEffect

        toast.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã");
        handleComplete?.({
          id: result.user.id,
          email: result.user.email,
          name: result.profile.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          role: result.profile.role,
          diaryData: {
            name: result.profile.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
            emoji: result.profile.diaryEmoji || 'üèÜ'
          },
          diaryName: result.profile.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
          diaryEmoji: result.profile.diaryEmoji || 'üèÜ',
          language: result.profile.language || 'ru',
          notificationSettings: result.profile.notificationSettings || {
            selectedTime: 'none',
            morningTime: '09:00',
            eveningTime: '21:00',
            permissionGranted: false
          },
          onboardingCompleted: result.profile.onboardingCompleted ?? false,
          createdAt: result.profile.createdAt || new Date().toISOString()
        });
      } else {
        toast.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", {
          description: result.error || "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å"
        });
      }
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      const result = await signUpWithEmail(email, password, {
        name: name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        diaryName: onboardingData?.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
        diaryEmoji: onboardingData?.diaryEmoji || 'üèÜ',
        language: onboardingData?.language || selectedLanguage,
        notificationSettings: onboardingData?.notificationSettings,
        firstEntry: onboardingData?.firstEntry
      });
      
      if (result.success && result.user && result.profile) {
        const userData: UserData = {
          id: result.user.id,
          email: result.user.email,
          name: result.profile.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          diaryData: {
            name: result.profile.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
            emoji: result.profile.diaryEmoji || 'üèÜ'
          },
          diaryName: result.profile.diaryName || '–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫',
          diaryEmoji: result.profile.diaryEmoji || 'üèÜ',
          language: result.profile.language || 'ru',
          notificationSettings: result.profile.notificationSettings || {
            selectedTime: 'none',
            morningTime: '09:00',
            eveningTime: '21:00',
            permissionGranted: false
          },
          onboardingCompleted: result.profile.onboardingCompleted ?? false,
          createdAt: result.profile.createdAt || new Date().toISOString()
        };

        toast.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω! üéâ");
        handleComplete?.(userData);
      } else {
        toast.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", {
          description: result.error || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email"
        });
      }
    }
  } catch (error: any) {
    console.error("Auth error:", error);
    toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", {
      description: error.message
    });
  } finally {
    setIsLoading(false);
  }
}

interface SocialAuthParams {
  provider: string;
  setIsLoading: (loading: boolean) => void;
}

/**
 * Handle social authentication (Google, Facebook, Telegram)
 */
export async function handleSocialAuth({
  provider,
  setIsLoading
}: SocialAuthParams) {
  setIsLoading(true);
  
  try {
    let result;
    
    switch (provider) {
      case 'google':
        result = await signInWithGoogle();
        toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google...");
        break;
      case 'facebook':
        result = await signInWithFacebook();
        toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Facebook...");
        break;
      case 'telegram':
        // Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Login Widget
        // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onTelegramAuth
        toast.success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...");
        break;
    }
    
    if (result && !result.success && result.error) {
      toast.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", {
        description: result.error
      });
      setIsLoading(false);
    }
    // OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  } catch (error: any) {
    console.error(`${provider} auth error:`, error);
    toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", {
      description: error.message
    });
    setIsLoading(false);
  }
}

