import { useState, useEffect } from "react";
import { AnimatePresence } from "motion/react";
import { Button } from "@/shared/components/ui/button";
import { toast } from "sonner";
import { useTranslation } from "@/shared/lib/i18n";
import { updateUserProfile } from "@/shared/lib/api";
import { SettingsRow, SettingsSection } from "./SettingsRow";
import { ThemeToggle } from "@/shared/components/ui/ThemeToggle";
import { PremiumModal } from "./PremiumModal";
import { ProfileEditModal } from "./ProfileEditModal";

// Import modular components
import {
  DEFAULT_AVATAR_URL,
  DEFAULT_LANGUAGES,
  NotificationsSection,
  SecuritySection,
  ProfileHeader,
  AdditionalSection,
  SupportSection,
  FAQModal,
  SupportModal,
  RateAppModal,
  LanguageModal,
  PWAInstallModal
} from "./settings";
import type { SettingsScreenProps, NotificationSettings } from "./settings";

// Re-export types for backward compatibility
export type { SettingsScreenProps };

import {
  LogOut,
  Palette
} from "lucide-react";

export function SettingsScreen({ userData, onLogout, onProfileUpdate }: SettingsScreenProps) {
  // Extract profile from userData (userData = { success, user, profile })
  const initialProfile = userData?.profile || userData;

  // Local state for profile (to update in real-time)
  const [profile, setProfile] = useState(initialProfile);

  const { t, changeLanguage } = useTranslation();

  // State –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notifications, setNotifications] = useState<NotificationSettings>({
    dailyReminder: profile?.notificationSettings?.dailyReminder || false,
    weeklyReport: profile?.notificationSettings?.weeklyReport || false,
    achievements: profile?.notificationSettings?.achievements || false,
    motivational: profile?.notificationSettings?.motivational || false,
  });

  // State –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const [biometricEnabled, setBiometricEnabled] = useState(profile?.biometricEnabled || false);
  const [autoBackupEnabled, setAutoBackupEnabled] = useState(profile?.backupEnabled || false);
  const [biometricAvailable, setBiometricAvailable] = useState(false);

  // State –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (Drawer - Bottom Sheets)
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [showLanguage, setShowLanguage] = useState(false);
  const [showSupport, setShowSupport] = useState(false);
  const [showRateApp, setShowRateApp] = useState(false);
  const [showFAQ, setShowFAQ] = useState(false);
  const [showPremium, setShowPremium] = useState(false);
  const [showPWAInstall, setShowPWAInstall] = useState(false);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –∏–∑ API
  const [languages, setLanguages] = useState(DEFAULT_LANGUAGES);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –∏–∑ API –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadLanguages = async () => {
      try {
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/translations-api/languages`, {
          headers: {
            'Content-Type': 'application/json',
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY
          }
        });
        if (response.ok) {
          const data = await response.json();
          const loadedLanguages = Array.isArray(data) ? data : (data.languages || []);
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–∏
          const activeLanguages = loadedLanguages.filter((lang: any) => lang.is_active || lang.enabled);
          if (activeLanguages.length > 0) {
            setLanguages(activeLanguages);
            console.log('‚úÖ Loaded languages from API:', activeLanguages.length);
          }
        }
      } catch (error) {
        console.error('Error loading languages:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —è–∑—ã–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    loadLanguages();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebAuthn –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
  useEffect(() => {
    const checkBiometric = async () => {
      if (window.PublicKeyCredential) {
        try {
          const available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
          setBiometricAvailable(available);
        } catch (error) {
          setBiometricAvailable(false);
        }
      }
    };
    checkBiometric();
  }, []);



  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å userData
  useEffect(() => {
    const newProfile = userData?.profile || userData;
    if (newProfile && newProfile.id !== profile?.id) {
      console.log('üîÑ [SettingsScreen] Syncing profile from userData:', newProfile);
      setProfile(newProfile);
    }
  }, [userData]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è state —Å userData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (profile?.notificationSettings) {
      setNotifications({
        dailyReminder: profile.notificationSettings.dailyReminder || false,
        weeklyReport: profile.notificationSettings.weeklyReport || false,
        achievements: profile.notificationSettings.achievements || false,
        motivational: profile.notificationSettings.motivational || false,
      });
    }
    if (profile?.biometricEnabled !== undefined) {
      setBiometricEnabled(profile.biometricEnabled);
    }
    if (profile?.backupEnabled !== undefined) {
      setAutoBackupEnabled(profile.backupEnabled);
    }
  }, [profile?.id]); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const saveNotifications = async () => {
      const userId = profile?.id;
      if (!userId) return;

      try {
        await updateUserProfile(userId, {
          notificationSettings: {
            ...profile.notificationSettings,
            ...notifications
          }
        });
        console.log('‚úÖ Notifications saved:', notifications);
      } catch (error) {
        console.error('‚ùå Error saving notifications:', error);
      }
    };

    const timeoutId = setTimeout(saveNotifications, 1000);
    return () => clearTimeout(timeoutId);
  }, [notifications, profile?.id]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  useEffect(() => {
    const saveSecurity = async () => {
      const userId = profile?.id;
      if (!userId) return;

      try {
        await updateUserProfile(userId, {
          biometricEnabled: biometricEnabled,
          backupEnabled: autoBackupEnabled
        });
        console.log('‚úÖ Security settings saved');
      } catch (error) {
        console.error('‚ùå Error saving security settings:', error);
      }
    };

    const timeoutId = setTimeout(saveSecurity, 1000);
    return () => clearTimeout(timeoutId);
  }, [biometricEnabled, autoBackupEnabled, profile?.id]);

  const handleLogout = () => {
    if (onLogout) {
      onLogout();
    }
  };



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const handleLanguageChange = async (languageCode: string) => {
    try {
      const userId = profile?.id;
      if (userId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await updateUserProfile(userId, { language: languageCode });
        console.log(`‚úÖ Language "${languageCode}" saved to DB`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        setProfile((prev: any) => ({ ...prev, language: languageCode }));

        // –í—ã–∑—ã–≤–∞–µ–º onProfileUpdate –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if (onProfileUpdate) {
          onProfileUpdate({ ...profile, language: languageCode });
        }
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫ –≤ i18n —Å–∏—Å—Ç–µ–º–µ
      await changeLanguage(languageCode);

      toast.success(t('languageChanged', '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!'));
      setShowLanguage(false);
    } catch (error) {
      console.error('Error changing language:', error);
      toast.error(t('languageChangeError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞'));
    }
  };

  return (
    <div className="pb-20 min-h-screen bg-background">
      {/* Profile Section */}
      <ProfileHeader profile={profile} onEditClick={() => setShowEditProfile(true)} />

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <NotificationsSection
        notifications={notifications}
        onNotificationsChange={setNotifications}
        userId={profile?.id}
        t={t}
      />

      {/* –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è - shadcn/ui —Å—Ç–∞–Ω–¥–∞—Ä—Ç */}
      <SettingsSection title={t.themes || "–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"}>
        <SettingsRow
          icon={Palette}
          iconColor="text-[var(--ios-purple)]"
          iconBgColor="bg-[var(--ios-purple)]/10"
          title={t.appearance || "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"}
          description={t.appearanceDescription || "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"}
          rightElement="custom"
          customRightElement={<ThemeToggle />}
        />
      </SettingsSection>

      {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
      <SecuritySection
        biometricEnabled={biometricEnabled}
        biometricAvailable={biometricAvailable}
        autoBackupEnabled={autoBackupEnabled}
        isPremium={userData?.isPremium || false}
        onBiometricChange={setBiometricEnabled}
        onAutoBackupChange={setAutoBackupEnabled}
        onPremiumRequired={() => setShowPremium(true)}
        t={t}
      />

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ */}
      <AdditionalSection
        currentLanguage={profile?.language}
        languageName={languages.find(l => l.code === profile?.language)?.native_name || '–†—É—Å—Å–∫–∏–π'}
        firstDayOfWeek={userData?.firstDayOfWeek}
        onLanguageClick={() => setShowLanguage(true)}
        t={t}
      />

      {/* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ */}
      <SupportSection
        onSupportClick={() => setShowSupport(true)}
        onRateAppClick={() => setShowRateApp(true)}
        onFAQClick={() => setShowFAQ(true)}
        onPWAInstallClick={() => setShowPWAInstall(true)}
        t={t}
      />

      {/* Logout Button */}
      <div className="px-4 pt-6 pb-8">
        <Button
          onClick={handleLogout}
          variant="outline"
          className="w-full h-14 text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300 font-medium"
        >
          <LogOut className="h-5 w-5 mr-2" strokeWidth={2} />
          {t.logout || "–í—ã–π—Ç–∏"}
        </Button>
      </div>



      {/* FAQ Modal */}
      <AnimatePresence>
        <FAQModal isOpen={showFAQ} onClose={() => setShowFAQ(false)} t={t} />
      </AnimatePresence>

      {/* Contact Support Modal */}
      <AnimatePresence>
        <SupportModal
          isOpen={showSupport}
          onClose={() => setShowSupport(false)}
          userEmail={profile?.email}
          t={t}
        />
      </AnimatePresence>

      {/* Rate App Modal */}
      <AnimatePresence>
        <RateAppModal isOpen={showRateApp} onClose={() => setShowRateApp(false)} />
      </AnimatePresence>

      {/* Language Selection Modal */}
      <AnimatePresence>
        <LanguageModal
          isOpen={showLanguage}
          onClose={() => setShowLanguage(false)}
          languages={languages}
          currentLanguage={profile?.language}
          onLanguageChange={handleLanguageChange}
          t={t}
        />
      </AnimatePresence>

      {/* PWA Install Modal */}
      <AnimatePresence>
        <PWAInstallModal isOpen={showPWAInstall} onClose={() => setShowPWAInstall(false)} t={t} />
      </AnimatePresence>

      {/* Premium Modal */}
      <PremiumModal open={showPremium} onClose={() => setShowPremium(false)} />

      {/* Profile Edit Modal */}
      <ProfileEditModal
        isOpen={showEditProfile}
        onClose={() => setShowEditProfile(false)}
        profile={{
          id: profile?.id || '',
          name: profile?.name || '',
          email: profile?.email || '',
          avatar: profile?.avatar || '',
        }}
        onProfileUpdated={(updatedProfile) => {
          console.log('‚úÖ Profile updated in SettingsScreen:', updatedProfile);
          // Update local state immediately for real-time display
          setProfile(updatedProfile);
          // Update global state in App.tsx
          if (onProfileUpdate) {
            onProfileUpdate(updatedProfile);
          }
        }}
      />
    </div>
  );
}

