import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "motion/react";
import { Avatar, AvatarFallback, AvatarImage } from "@/shared/components/ui/avatar";
import { Button } from "@/shared/components/ui/button";
import { Badge } from "@/shared/components/ui/badge";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/shared/components/ui/accordion";
import { Input } from "@/shared/components/ui/input";
import { Textarea } from "@/shared/components/ui/textarea";
import { toast } from "sonner";
import { useTranslation } from "@/shared/lib/i18n";
import { updateUserProfile } from "@/shared/lib/api";
import { SettingsRow, SettingsSection } from "./SettingsRow";
import { Switch } from "@/shared/components/ui/switch";
import { ThemeToggle } from "@/shared/components/ui/ThemeToggle";
import { PremiumModal } from "./PremiumModal";
import { ProfileEditModal } from "./ProfileEditModal";
import { showFeedbackWidget } from "@/shared/lib/monitoring/sentry";

// –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
const DEFAULT_AVATAR_URL = 'https://cdn.shadcnstudio.com/ss-assets/avatar/avatar-5.png';
import {
  Bell,
  Star,
  Lock,
  Shield,
  Globe,
  HelpCircle,
  MessageCircle,
  LogOut,
  Edit2,
  User,
  Phone,
  Mail,
  Palette,
  Calendar,
  Download,
  Upload,
  Trash2,
  Smartphone,
  Crown,
  X,
  Bug
} from "lucide-react";

interface SettingsScreenProps {
  userData?: any;
  onLogout?: () => void;
  onProfileUpdate?: (updatedProfile: any) => void;
}

export function SettingsScreen({ userData, onLogout, onProfileUpdate }: SettingsScreenProps) {
  // Extract profile from userData (userData = { success, user, profile })
  const initialProfile = userData?.profile || userData;

  // Local state for profile (to update in real-time)
  const [profile, setProfile] = useState(initialProfile);

  const { t, changeLanguage } = useTranslation();

  // State –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notifications, setNotifications] = useState({
    dailyReminder: profile?.notificationSettings?.dailyReminder || false,
    weeklyReport: profile?.notificationSettings?.weeklyReport || false,
    achievements: profile?.notificationSettings?.achievements || false,
    motivational: profile?.notificationSettings?.motivational || false,
  });

  // State –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const [biometricEnabled, setBiometricEnabled] = useState(profile?.biometricEnabled || false);
  const [autoBackupEnabled, setAutoBackupEnabled] = useState(profile?.backupEnabled || false);
  const [biometricAvailable, setBiometricAvailable] = useState(false);

  // State –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (Drawer - Bottom Sheets)
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [showLanguage, setShowLanguage] = useState(false);
  const [showSupport, setShowSupport] = useState(false);
  const [showRateApp, setShowRateApp] = useState(false);
  const [showFAQ, setShowFAQ] = useState(false);
  const [showPremium, setShowPremium] = useState(false);
  const [showPWAInstall, setShowPWAInstall] = useState(false);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –∏–∑ API
  const [languages, setLanguages] = useState([
    { code: 'ru', name: 'Russian', native_name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', is_active: true },
    { code: 'en', name: 'English', native_name: 'English', flag: 'üá∫üá∏', is_active: true },
    { code: 'es', name: 'Spanish', native_name: 'Espa√±ol', flag: 'üá™üá∏', is_active: true },
    { code: 'de', name: 'German', native_name: 'Deutsch', flag: 'üá©üá™', is_active: true },
    { code: 'fr', name: 'French', native_name: 'Fran√ßais', flag: 'üá´üá∑', is_active: true },
    { code: 'zh', name: 'Chinese', native_name: '‰∏≠Êñá', flag: 'üá®üá≥', is_active: true },
    { code: 'ja', name: 'Japanese', native_name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', is_active: true },
  ]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤ –∏–∑ API –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadLanguages = async () => {
      try {
        const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/translations-api/languages`, {
          headers: {
            'Content-Type': 'application/json',
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY
          }
        });
        if (response.ok) {
          const data = await response.json();
          const loadedLanguages = Array.isArray(data) ? data : (data.languages || []);
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–∏
          const activeLanguages = loadedLanguages.filter((lang: any) => lang.is_active || lang.enabled);
          if (activeLanguages.length > 0) {
            setLanguages(activeLanguages);
            console.log('‚úÖ Loaded languages from API:', activeLanguages.length);
          }
        }
      } catch (error) {
        console.error('Error loading languages:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —è–∑—ã–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    loadLanguages();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebAuthn –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
  useEffect(() => {
    const checkBiometric = async () => {
      if (window.PublicKeyCredential) {
        try {
          const available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
          setBiometricAvailable(available);
        } catch (error) {
          setBiometricAvailable(false);
        }
      }
    };
    checkBiometric();
  }, []);



  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å userData
  useEffect(() => {
    const newProfile = userData?.profile || userData;
    if (newProfile && newProfile.id !== profile?.id) {
      console.log('üîÑ [SettingsScreen] Syncing profile from userData:', newProfile);
      setProfile(newProfile);
    }
  }, [userData]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è state —Å userData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (profile?.notificationSettings) {
      setNotifications({
        dailyReminder: profile.notificationSettings.dailyReminder || false,
        weeklyReport: profile.notificationSettings.weeklyReport || false,
        achievements: profile.notificationSettings.achievements || false,
        motivational: profile.notificationSettings.motivational || false,
      });
    }
    if (profile?.biometricEnabled !== undefined) {
      setBiometricEnabled(profile.biometricEnabled);
    }
    if (profile?.backupEnabled !== undefined) {
      setAutoBackupEnabled(profile.backupEnabled);
    }
  }, [profile?.id]); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const saveNotifications = async () => {
      const userId = profile?.id;
      if (!userId) return;

      try {
        await updateUserProfile(userId, {
          notificationSettings: {
            ...profile.notificationSettings,
            ...notifications
          }
        });
        console.log('‚úÖ Notifications saved:', notifications);
      } catch (error) {
        console.error('‚ùå Error saving notifications:', error);
      }
    };

    const timeoutId = setTimeout(saveNotifications, 1000);
    return () => clearTimeout(timeoutId);
  }, [notifications, profile?.id]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  useEffect(() => {
    const saveSecurity = async () => {
      const userId = profile?.id;
      if (!userId) return;

      try {
        await updateUserProfile(userId, {
          biometricEnabled: biometricEnabled,
          backupEnabled: autoBackupEnabled
        });
        console.log('‚úÖ Security settings saved');
      } catch (error) {
        console.error('‚ùå Error saving security settings:', error);
      }
    };

    const timeoutId = setTimeout(saveSecurity, 1000);
    return () => clearTimeout(timeoutId);
  }, [biometricEnabled, autoBackupEnabled, profile?.id]);

  const handleLogout = () => {
    if (onLogout) {
      onLogout();
    }
  };



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  const handleLanguageChange = async (languageCode: string) => {
    try {
      const userId = profile?.id;
      if (userId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await updateUserProfile(userId, { language: languageCode });
        console.log(`‚úÖ Language "${languageCode}" saved to DB`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        setProfile((prev: any) => ({ ...prev, language: languageCode }));

        // –í—ã–∑—ã–≤–∞–µ–º onProfileUpdate –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if (onProfileUpdate) {
          onProfileUpdate({ ...profile, language: languageCode });
        }
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —è–∑—ã–∫ –≤ i18n —Å–∏—Å—Ç–µ–º–µ
      await changeLanguage(languageCode);

      toast.success(t('languageChanged', '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!'));
      setShowLanguage(false);
    } catch (error) {
      console.error('Error changing language:', error);
      toast.error(t('languageChangeError', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞'));
    }
  };

  return (
    <div className="pb-20 min-h-screen bg-background">
      {/* Header - User Name */}
      <div className="bg-card border-b border-border pt-12 pb-6 transition-colors duration-300">
        <h1 className="text-center text-lg font-semibold text-foreground">
          {profile?.name || '–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'}
        </h1>
      </div>

      {/* Profile Section */}
      <div className="bg-card px-6 py-8 border-b border-border transition-colors duration-300">
        <div className="flex flex-col items-center">
          <div className="relative">
            <Avatar className="h-24 w-24 ring-4 ring-primary/10">
              <AvatarImage src={profile?.avatar || DEFAULT_AVATAR_URL} alt={profile?.name} />
              <AvatarFallback className="bg-muted">
                <img src={DEFAULT_AVATAR_URL} alt="Default avatar" className="h-full w-full object-cover" />
              </AvatarFallback>
            </Avatar>
            <button
              onClick={() => setShowEditProfile(true)}
              className="absolute bottom-0 right-0 p-2 bg-card rounded-full shadow-lg border border-border hover:bg-muted transition-colors"
              aria-label="Edit profile"
            >
              <Edit2 className="h-5 w-5 text-foreground" strokeWidth={2} />
            </button>
          </div>

          {/* User Info */}
          <div className="mt-4 text-center">
            <p className="text-sm text-muted-foreground">
              {profile?.email}
            </p>
          </div>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <SettingsSection title={t.notifications || "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}>
        <SettingsRow
          icon={Bell}
          iconColor="text-[var(--ios-blue)]"
          iconBgColor="bg-[var(--ios-blue)]/10"
          title={t.dailyReminders || "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"}
          description="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö"
          rightElement="switch"
          switchChecked={notifications.dailyReminder}
          onSwitchChange={(checked) => setNotifications(prev => ({...prev, dailyReminder: checked}))}
        />
        <SettingsRow
          icon={Calendar}
          iconColor="text-[var(--ios-purple)]"
          iconBgColor="bg-[var(--ios-purple)]/10"
          title={t.weeklyReports || "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"}
          description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"
          rightElement="switch"
          switchChecked={notifications.weeklyReport}
          onSwitchChange={(checked) => setNotifications(prev => ({...prev, weeklyReport: checked}))}
        />
        <SettingsRow
          icon={Star}
          iconColor="text-[var(--ios-green)]"
          iconBgColor="bg-[var(--ios-green)]/10"
          title={t.newAchievements || "–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"}
          description="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö"
          rightElement="switch"
          switchChecked={notifications.achievements}
          onSwitchChange={(checked) => setNotifications(prev => ({...prev, achievements: checked}))}
        />
        <SettingsRow
          icon={Crown}
          iconColor="text-[var(--ios-orange)]"
          iconBgColor="bg-[var(--ios-orange)]/10"
          title={t.motivationalMessages || "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"}
          description="–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
          rightElement="switch"
          switchChecked={notifications.motivational}
          onSwitchChange={(checked) => setNotifications(prev => ({...prev, motivational: checked}))}
        />
      </SettingsSection>

      {/* –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è - shadcn/ui —Å—Ç–∞–Ω–¥–∞—Ä—Ç */}
      <SettingsSection title={t.themes || "–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"}>
        <SettingsRow
          icon={Palette}
          iconColor="text-[var(--ios-purple)]"
          iconBgColor="bg-[var(--ios-purple)]/10"
          title={t.appearance || "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"}
          description={t.appearanceDescription || "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"}
          rightElement="custom"
          customRightElement={<ThemeToggle />}
        />
      </SettingsSection>

      {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
      <SettingsSection title={t.security || "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"}>
        <SettingsRow
          icon={Lock}
          iconColor="text-[var(--ios-blue)]"
          iconBgColor="bg-[var(--ios-blue)]/10"
          title={t.biometricProtection || "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞"}
          description={biometricAvailable ? "–î–æ—Å—Ç—É–ø–Ω–æ" : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"}
          rightElement="switch"
          switchChecked={biometricEnabled}
          onSwitchChange={setBiometricEnabled}
          disabled={!biometricAvailable}
        />
        <SettingsRow
          icon={Shield}
          iconColor="text-[var(--ios-green)]"
          iconBgColor="bg-[var(--ios-green)]/10"
          title={t.autoBackup || "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ"}
          description={userData?.isPremium ? "–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è" : "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º"}
          rightElement="switch"
          switchChecked={autoBackupEnabled}
          onSwitchChange={(checked) => {
            if (!userData?.isPremium && checked) {
              setShowPremium(true);
            } else {
              setAutoBackupEnabled(checked);
            }
          }}
          onClick={() => {
            if (!userData?.isPremium) {
              setShowPremium(true);
            }
          }}
          disabled={!userData?.isPremium}
        />
      </SettingsSection>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ */}
      <SettingsSection title={t.additional || "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"}>
        <SettingsRow
          icon={Globe}
          iconColor="text-[var(--ios-indigo)]"
          iconBgColor="bg-[var(--ios-indigo)]/10"
          title={t.language || "–Ø–∑—ã–∫"}
          description={languages.find(l => l.code === profile?.language)?.native_name || '–†—É—Å—Å–∫–∏–π'}
          onClick={() => setShowLanguage(true)}
        />
        <SettingsRow
          icon={Calendar}
          iconColor="text-[var(--ios-blue)]"
          iconBgColor="bg-[var(--ios-blue)]/10"
          title={t.firstDayOfWeek || "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"}
          description={userData?.firstDayOfWeek === 'monday' ? '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' : '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
          onClick={() => toast.info('Feature coming soon')}
        />
        <SettingsRow
          icon={Download}
          iconColor="text-[var(--ios-green)]"
          iconBgColor="bg-[var(--ios-green)]/10"
          title={t.exportData || "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}
          description="JSON, CSV, ZIP"
          onClick={() => toast.info('Feature coming soon')}
        />
        <SettingsRow
          icon={Upload}
          iconColor="text-[var(--ios-purple)]"
          iconBgColor="bg-[var(--ios-purple)]/10"
          title={t.importData || "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"}
          description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"
          onClick={() => toast.info('Feature coming soon')}
        />
        <SettingsRow
          icon={Trash2}
          iconColor="text-[var(--ios-red)]"
          iconBgColor="bg-[var(--ios-red)]/10"
          title={t.deleteAllData || "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"}
          description="–ù–µ–æ–±—Ä–∞—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
          onClick={() => toast.error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')}
        />
      </SettingsSection>

      {/* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ */}
      <SettingsSection title={t.support || "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"}>
        <SettingsRow
          icon={MessageCircle}
          iconColor="text-[var(--ios-blue)]"
          iconBgColor="bg-[var(--ios-blue)]/10"
          title={t.contactSupport || "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"}
          description="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º"
          onClick={() => setShowSupport(true)}
        />
        <SettingsRow
          icon={Star}
          iconColor="text-[var(--ios-yellow)]"
          iconBgColor="bg-[var(--ios-yellow)]/10"
          title={t.rateApp || "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"}
          description="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ—Ç–∑—ã–≤–æ–º"
          onClick={() => setShowRateApp(true)}
        />
        <SettingsRow
          icon={Bug}
          iconColor="text-[var(--ios-red)]"
          iconBgColor="bg-[var(--ios-red)]/10"
          title="–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"
          description="–ü–æ–º–æ–≥–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
          onClick={() => {
            try {
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å—Ä–∞–∑—É –≤ —Ä–∞—Å–∫—Ä—ã—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
              showFeedbackWidget(true);
            } catch (error) {
              console.error('Failed to show feedback widget:', error);
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
            }
          }}
        />
        <SettingsRow
          icon={HelpCircle}
          iconColor="text-[var(--ios-green)]"
          iconBgColor="bg-[var(--ios-green)]/10"
          title={t.faq || "FAQ"}
          description="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
          onClick={() => setShowFAQ(true)}
        />
        <SettingsRow
          icon={Smartphone}
          iconColor="text-[var(--ios-purple)]"
          iconBgColor="bg-[var(--ios-purple)]/10"
          title={t.installPWA || "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"}
          description="PWA –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
          onClick={() => setShowPWAInstall(true)}
        />
      </SettingsSection>

      {/* Logout Button */}
      <div className="px-4 pt-6 pb-8">
        <Button
          onClick={handleLogout}
          variant="outline"
          className="w-full h-14 text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300 font-medium"
        >
          <LogOut className="h-5 w-5 mr-2" strokeWidth={2} />
          {t.logout || "–í—ã–π—Ç–∏"}
        </Button>
      </div>



      {/* FAQ Modal */}
      <AnimatePresence>
        {showFAQ && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowFAQ(false)}
              className="fixed inset-0 bg-black/40 z-modal-backdrop backdrop-blur-sm"
            />

            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="modal-bottom-sheet z-modal bg-card p-modal max-w-md mx-auto overflow-y-auto border-t border-border transition-colors duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-title-3 text-foreground">{t.faq || "FAQ"}</h3>
                <button
                  onClick={() => setShowFAQ(false)}
                  className="p-1 hover:bg-accent/10 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-foreground" />
                </button>
              </div>

              <p className="text-footnote text-muted-foreground mb-4">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>

              <Accordion type="single" collapsible className="w-full">
                <AccordionItem value="item-1">
                  <AccordionTrigger>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ?</AccordionTrigger>
                  <AccordionContent>
                    –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "+" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á—É, –∏ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-2">
                  <AccordionTrigger>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç AI-–∞–Ω–∞–ª–∏–∑?</AccordionTrigger>
                  <AccordionContent>
                    AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∑–∞–ø–∏—Å—å, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ/–Ω–µ—É–¥–∞—á–∞), —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∏ —Å–æ–∑–¥–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤–µ—Ç–∞–º–∏.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-3">
                  <AccordionTrigger>–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏?</AccordionTrigger>
                  <AccordionContent>
                    –≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç AI, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-4">
                  <AccordionTrigger>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø?</AccordionTrigger>
                  <AccordionContent>
                    –ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem value="item-5">
                  <AccordionTrigger>–ö–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?</AccordionTrigger>
                  <AccordionContent>
                    –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –î–æ—Å—Ç—É–ø–Ω—ã —Ñ–æ—Ä–º–∞—Ç—ã JSON, CSV –∏ ZIP.
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* Contact Support Modal */}
      <AnimatePresence>
        {showSupport && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowSupport(false)}
              className="fixed inset-0 bg-black/40 z-modal-backdrop backdrop-blur-sm"
            />

            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="modal-bottom-sheet z-modal bg-card p-modal max-w-md mx-auto overflow-y-auto border-t border-border transition-colors duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-title-3 text-foreground">{t.contactSupport || "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"}</h3>
                <button
                  onClick={() => setShowSupport(false)}
                  className="p-1 hover:bg-accent/10 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-foreground" />
                </button>
              </div>

              <p className="text-footnote text-muted-foreground mb-4">–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</p>

              <div className="space-y-4">
                <div>
                  <label className="text-footnote font-medium text-foreground mb-1 block">
                    Email
                  </label>
                  <Input
                    type="email"
                    value={profile?.email || ''}
                    disabled
                    className="bg-muted"
                  />
                </div>
                <div>
                  <label className="text-footnote font-medium text-foreground mb-1 block">
                    –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
                  </label>
                  <Input
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–±–ª–µ–º–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"
                  />
                </div>
                <div>
                  <label className="text-footnote font-medium text-foreground mb-1 block">
                    –°–æ–æ–±—â–µ–Ω–∏–µ
                  </label>
                  <Textarea
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å..."
                    rows={6}
                  />
                </div>
                <Button
                  onClick={() => {
                    toast.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.");
                    setShowSupport(false);
                  }}
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* Rate App Modal */}
      <AnimatePresence>
        {showRateApp && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowRateApp(false)}
              className="fixed inset-0 bg-black/40 z-modal-backdrop backdrop-blur-sm"
            />

            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="modal-bottom-sheet z-modal bg-card p-modal max-w-md mx-auto overflow-y-auto border-t border-border transition-colors duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-title-3 text-foreground">–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h3>
                <button
                  onClick={() => setShowRateApp(false)}
                  className="p-1 hover:bg-accent/10 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-foreground" />
                </button>
              </div>

              <p className="text-footnote text-muted-foreground mb-6">–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ</p>

              <div className="space-y-6">
                {/* Star Rating */}
                <div className="space-y-3">
                  <label className="text-footnote font-medium text-foreground">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</label>
                  <div className="flex gap-responsive-sm justify-center py-4">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <button
                        key={star}
                        type="button"
                        className="transition-transform hover:scale-110"
                      >
                        <Star className="h-10 w-10 fill-yellow-400 text-yellow-400" />
                      </button>
                    ))}
                  </div>
                  <p className="text-center text-footnote text-muted-foreground">–û—Ç–ª–∏—á–Ω–æ! üéâ</p>
                </div>

                {/* Comment */}
                <div className="space-y-2">
                  <label className="text-footnote font-medium text-foreground">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                  <Textarea
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å..."
                    rows={4}
                    className="resize-none"
                  />
                </div>

                <Button
                  onClick={() => {
                    toast.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! ‚≠ê");
                    setShowRateApp(false);
                  }}
                  className="w-full"
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                </Button>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* Language Selection Modal */}
      <AnimatePresence>
        {showLanguage && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowLanguage(false)}
              className="fixed inset-0 bg-black/40 z-modal-backdrop backdrop-blur-sm"
            />

            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="modal-bottom-sheet z-modal bg-card p-modal max-w-md mx-auto overflow-y-auto border-t border-border transition-colors duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-title-3 text-foreground">{t.language || "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"}</h3>
                <button
                  onClick={() => setShowLanguage(false)}
                  className="p-1 hover:bg-accent/10 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-foreground" />
                </button>
              </div>

              <p className="text-footnote text-muted-foreground mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>

              <div className="space-y-2">
                {languages.map(language => (
                  <button
                    key={language.code}
                    onClick={() => handleLanguageChange(language.code)}
                    className={`w-full flex items-center justify-between p-4 rounded-xl transition-all ${
                      profile?.language === language.code
                        ? 'bg-primary/10 border-2 border-primary'
                        : 'bg-card border border-border hover:bg-accent/5'
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{language.flag}</span>
                      <div className="text-left">
                        <p className="font-medium text-foreground">{language.native_name}</p>
                        <p className="text-sm text-muted-foreground">{language.name}</p>
                      </div>
                    </div>
                    {profile?.language === language.code && (
                      <div className="p-1.5 bg-primary rounded-full">
                        <svg className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                    )}
                  </button>
                ))}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* PWA Install Modal */}
      <AnimatePresence>
        {showPWAInstall && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowPWAInstall(false)}
              className="fixed inset-0 bg-black/40 z-modal-backdrop backdrop-blur-sm"
            />

            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="modal-bottom-sheet z-modal bg-card p-modal max-w-md mx-auto overflow-y-auto border-t border-border transition-colors duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-title-3 text-foreground">{t.installPWA || "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"}</h3>
                <button
                  onClick={() => setShowPWAInstall(false)}
                  className="p-1 hover:bg-accent/10 rounded-full transition-colors"
                >
                  <X className="w-5 h-5 text-foreground" />
                </button>
              </div>

              <p className="text-footnote text-muted-foreground mb-4">–î–æ–±–∞–≤—å—Ç–µ UNITY –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω</p>

              <div className="space-y-4">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="text-headline text-blue-900 mb-2">iOS (Safari)</h4>
                  <ol className="list-decimal list-inside space-y-1 text-footnote text-blue-800">
                    <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞</li>
                    <li>–í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π"</li>
                    <li>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"</li>
                  </ol>
                </div>
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h4 className="text-headline text-green-900 mb-2">Android (Chrome)</h4>
                  <ol className="list-decimal list-inside space-y-1 text-footnote text-green-800">
                    <li>–ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É</li>
                    <li>–í—ã–±–µ—Ä–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"</li>
                    <li>–ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"</li>
                  </ol>
                </div>
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <h4 className="font-semibold text-purple-900 mb-2">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ PWA</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm text-purple-800">
                    <li>–†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω</li>
                    <li>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</li>
                    <li>–ò–∫–æ–Ω–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ</li>
                    <li>–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</li>
                  </ul>
                </div>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* Premium Modal */}
      <PremiumModal open={showPremium} onClose={() => setShowPremium(false)} />

      {/* Profile Edit Modal */}
      <ProfileEditModal
        isOpen={showEditProfile}
        onClose={() => setShowEditProfile(false)}
        profile={{
          id: profile?.id || '',
          name: profile?.name || '',
          email: profile?.email || '',
          avatar: profile?.avatar || '',
        }}
        onProfileUpdated={(updatedProfile) => {
          console.log('‚úÖ Profile updated in SettingsScreen:', updatedProfile);
          // Update local state immediately for real-time display
          setProfile(updatedProfile);
          // Update global state in App.tsx
          if (onProfileUpdate) {
            onProfileUpdate(updatedProfile);
          }
        }}
      />
    </div>
  );
}

