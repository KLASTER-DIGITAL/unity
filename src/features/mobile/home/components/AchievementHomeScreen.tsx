import { useState, useRef, useEffect } from "react";
import { AnimatedView, AnimatedPresence } from "@/shared/lib/platform/animation";
import { AchievementHeader } from "./AchievementHeader";
import { ChatInputSection } from "./ChatInputSection";
import { RecentEntriesFeed } from "./RecentEntriesFeed";
import { EntryDetailModal } from "./EntryDetailModal";
import { getUserStats, getMotivationCards, markCardAsRead, type DiaryEntry } from "@/shared/lib/api";
import { useTranslation, type Language } from "@/shared/lib/i18n";
import { toast } from "sonner";
import { LottiePreloaderCompact } from "@/shared/components/LottiePreloader";
import { Undo2, X } from "lucide-react";

// Import modular components
import {
  SwipeCard,
  getDefaultMotivations,
  entryToCard
} from "./achievement";
import type {
  DiaryData,
  AchievementHomeScreenProps,
  AchievementCard
} from "./achievement";

// Re-export types for backward compatibility
export type { DiaryData, AchievementHomeScreenProps, AchievementCard };

// ‚úÖ REMOVED: GRADIENTS moved to ./achievement/constants.ts
// ‚úÖ REMOVED: DEFAULT_MOTIVATIONS moved to ./achievement/constants.ts
// ‚úÖ REMOVED: getDefaultMotivations() moved to ./achievement/utils.ts
// ‚úÖ REMOVED: entryToCard() moved to ./achievement/utils.ts
// ‚úÖ REMOVED: SwipeCard component moved to ./achievement/SwipeCard.tsx

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export function AchievementHomeScreen({
  diaryData = { name: "–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", emoji: "üèÜ" },
  userData,
  onNavigateToHistory,
  onNavigateToSettings
}: AchievementHomeScreenProps) {
  const { t } = useTranslation();
  const [cards, setCards] = useState<AchievementCard[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showUndo, setShowUndo] = useState(false);
  const [lastRemovedCard, setLastRemovedCard] = useState<AchievementCard | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [currentStreak, setCurrentStreak] = useState(0);
  const [isFirstLoad, setIsFirstLoad] = useState(true);
  const [feedRefreshKey, setFeedRefreshKey] = useState(0);
  const [selectedEntry, setSelectedEntry] = useState<DiaryEntry | null>(null);
  const [showAllRead, setShowAllRead] = useState(true); // ‚úÖ NEW: "–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!" visibility
  const undoTimeoutRef = useRef<NodeJS.Timeout>();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  const currentDate = new Date();
  const dateFormatter = new Intl.DateTimeFormat('ru', { 
    weekday: 'long', 
    day: 'numeric',
    month: 'long'
  });
  const formattedDate = dateFormatter.format(currentDate);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadEntriesAndStats();
  }, []);

  const loadEntriesAndStats = async () => {
    try {
      setIsLoading(true);
      const userId = userData?.user?.id || userData?.id || "anonymous";  // ‚úÖ FIXED: Try user.id first
      const userLanguage = (userData?.profile?.language || userData?.language || 'ru') as Language;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [motivationCards, stats] = await Promise.all([
        getMotivationCards(userId),
        getUserStats(userId)
      ]);

      console.log("Loaded motivation cards:", motivationCards);
      console.log("User stats:", stats);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
      setCards(motivationCards);
      setCurrentIndex(0); // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

      // –û–±–Ω–æ–≤–ª—è–µ–º streak
      setCurrentStreak(stats.currentStreak);

    } catch (error) {
      console.error("Error loading motivation cards:", error);
      toast.error(t('failed_load_cards', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏'), {
        description: t('check_internet_connection', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É')
      });
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
      const userLanguage = (userData?.language || 'ru') as Language;
      const defaultCards = getDefaultMotivations(userLanguage);
      setCards(defaultCards);
    } finally {
      setIsLoading(false);
      setIsFirstLoad(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const handleNewEntry = (entry: DiaryEntry) => {
    console.log("New entry created:", entry);

    const userLanguage = (userData?.language || 'ru') as Language;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—á–∞–ª–æ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç)
    const newCard = entryToCard(entry, 0, userLanguage);
    setCards(prev => [newCard, ...prev]);

    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å (–∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –±—ã–ª–æ), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    if (cards.length === 0) {
      setCurrentIndex(0);
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ–ª—å–∫–æ stats)
    const userId = userData?.id || "anonymous";
    getUserStats(userId).then(stats => {
      setCurrentStreak(stats.currentStreak);
    }).catch(err => {
      console.error("Error updating stats:", err);
    });

    // ‚úÖ NEW: Trigger feed refresh
    setFeedRefreshKey(prev => prev + 1);

    // ‚úÖ NEW: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!" —Å–Ω–æ–≤–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    setShowAllRead(true);

    // ‚úÖ FIX: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–ø–æ—Å–ª–µ AI-–∞–Ω–∞–ª–∏–∑–∞)
    setTimeout(() => {
      console.log("Reloading motivation cards after AI analysis...");
      getMotivationCards(userId).then(motivationCards => {
        console.log("Reloaded motivation cards:", motivationCards);
        setCards(motivationCards);
        setCurrentIndex(0); // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      }).catch(err => {
        console.error("Error reloading motivation cards:", err);
      });
    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞

    toast.success(t('achievement_saved_title', '–û—Ç–ª–∏—á–Ω–æ! üéâ'), {
      description: t('achievement_saved_desc', '–¢–≤–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    });
  };

  const handleSwipe = async (direction: 'left' | 'right') => {
    const currentCard = cards[currentIndex];
    
    if (direction === 'right') {
      // Mark as loved/read
      setLastRemovedCard(currentCard);
      setShowUndo(true);
      
      // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –≤ API
      if (currentCard.entryId && userData?.id) {
        try {
          await markCardAsRead(userData.id, currentCard.entryId);
          console.log('Card marked as read:', currentCard.entryId);
        } catch (error) {
          console.error('Error marking card as read:', error);
        }
      }
      
      // Haptic feedback
      if (navigator.vibrate) {
        navigator.vibrate([50, 100, 50]);
      }

      // Auto-hide undo after 5 seconds
      if (undoTimeoutRef.current) {
        clearTimeout(undoTimeoutRef.current);
      }
      undoTimeoutRef.current = setTimeout(() => {
        setShowUndo(false);
        setLastRemovedCard(null);
      }, 5000);
    }

    // Move to next card
    setCurrentIndex(prev => prev + 1);
  };

  const handleUndo = () => {
    if (lastRemovedCard) {
      setCurrentIndex(prev => prev - 1);
      setShowUndo(false);
      setLastRemovedCard(null);
      
      if (undoTimeoutRef.current) {
        clearTimeout(undoTimeoutRef.current);
      }
    }
  };

  const visibleCards = cards.slice(currentIndex, currentIndex + 4);
  const hasCards = currentIndex < cards.length;

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ userData.profile.name –∏–ª–∏ userData.name –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
  const userName = userData?.profile?.name || userData?.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const userEmail = userData?.profile?.email || userData?.email;
  const avatarUrl = userData?.profile?.avatar || userData?.avatar;

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º streak)
  const daysInApp = currentStreak > 0 ? currentStreak : 1;

  return (
    <div className="min-h-screen bg-background pb-20 scrollbar-hide">
      {/* Achievement Header */}
      <AchievementHeader
        userName={userName}
        daysInApp={daysInApp}
        userEmail={userEmail}
        avatarUrl={avatarUrl}
        onNavigateToSettings={onNavigateToSettings}
        onNavigateToHistory={onNavigateToHistory}
      />

      {/* Loading State */}
      {isLoading && (
        <div className="p-section flex items-center justify-center">
          <LottiePreloaderCompact showMessage={false} size="md" />
        </div>
      )}

      {/* ‚úÖ FIX: Swipe Cards Section - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –≤—ã—Å–æ—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      {!isLoading && hasCards && (
        <div className="p-section">
          {/* Cards Stack Container - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É */}
          <div className="relative w-full min-h-[280px] mb-responsive-md">
            <AnimatedPresence initial={false}>
              {visibleCards.reverse().map((card, idx) => {
                const actualIndex = visibleCards.length - 1 - idx;
                return (
                  <SwipeCard
                    key={card.id}
                    card={card}
                    index={actualIndex}
                    totalCards={visibleCards.length}
                    onSwipe={handleSwipe}
                    isTop={actualIndex === 0}
                  />
                );
              })}
            </AnimatedPresence>
          </div>
        </div>
      )}

      {/* ‚úÖ FIX: "–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!" —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è */}
      {!isLoading && !hasCards && showAllRead && (
        <div className="px-6 pt-0 pb-3">
          <AnimatedView
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-card rounded-[var(--radius-xl)] p-5 border border-border text-center relative"
          >
            {/* Close Button */}
            <button
              onClick={() => setShowAllRead(false)}
              className="absolute top-3 right-3 w-8 h-8 flex items-center justify-center rounded-full bg-muted/50 hover:bg-muted transition-colors"
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <X className="w-4 h-4 text-muted-foreground" />
            </button>

            <div className="w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-2">
              <span className="text-[24px]">üéâ</span>
            </div>
            <h3 className="text-foreground mb-1.5 text-[16px]!">–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!</h3>
            <p className="text-muted-foreground text-[13px]! leading-[1.4]">
              –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
            </p>
          </AnimatedView>
        </div>
      )}

      {/* ‚úÖ FIX: Chat Container - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ */}
      {!isLoading && (
        <div className="relative w-full">
          <ChatInputSection
            userName={userName}
            userId={userData?.user?.id || userData?.id || "anonymous"}  // ‚úÖ FIXED: Try user.id first
            onMessageSent={(message) => {
              console.log("New achievement message:", message);
            }}
            onEntrySaved={handleNewEntry}
          />
        </div>
      )}

      {/* Recent Entries Feed - –õ–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π */}
      {!isLoading && (
        <RecentEntriesFeed
          key={feedRefreshKey} // ‚úÖ NEW: Force refresh when key changes
          userData={userData}
          language={userData?.language || 'ru'}
          onEntryClick={(entry) => {
            setSelectedEntry(entry);
          }}
          onViewAllClick={() => {
            console.log("Navigate to History");
            onNavigateToHistory?.();
          }}
        />
      )}

      {/* Entry Detail Modal */}
      <EntryDetailModal
        entry={selectedEntry}
        isOpen={selectedEntry !== null}
        onClose={() => setSelectedEntry(null)}
      />
    </div>
  );
}

export default AchievementHomeScreen;
