import { analyzeTextWithAI, createEntry } from "@/shared/lib/api";
import { toast } from "sonner";
import { saveEntryOffline } from "@/shared/lib/offline";
import { triggerHapticFeedback } from "./PermissionUtils";
import type { ChatMessage } from "./types";

interface MessageHandlerParams {
  inputText: string;
  uploadedMedia: any[];
  selectedCategory: string | null;
  userName: string;
  userId: string;
  setShowSuccessModal: (show: boolean) => void;
  setInputText: (text: string) => void;
  setIsProcessing: (processing: boolean) => void;
  clearMedia: () => void;
  onMessageSent?: (message: ChatMessage) => void;
  onEntrySaved?: (entry: any) => void;
}

/**
 * Handle sending a message
 * Analyzes text with AI, saves entry to database, and handles offline mode
 */
export async function handleSendMessage({
  inputText,
  uploadedMedia,
  selectedCategory,
  userName,
  userId,
  setShowSuccessModal,
  setInputText,
  setIsProcessing,
  clearMedia,
  onMessageSent,
  onEntrySaved
}: MessageHandlerParams) {
  if (!inputText.trim() && uploadedMedia.length === 0) return;

  const userText = inputText.trim();
  const userMessage: ChatMessage = {
    id: Date.now().toString(),
    type: 'user',
    text: userText || 'üì∑ –ú–µ–¥–∏–∞',
    timestamp: new Date(),
    category: selectedCategory || undefined
  };

  // ‚úÖ FIX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º success modal –°–†–ê–ó–£ (–¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
  setShowSuccessModal(true);
  setInputText("");
  setIsProcessing(true);

  // Haptic feedback
  triggerHapticFeedback(50);

  try {
    // –ó–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    console.log("Analyzing text with AI...");
    const analysis = await analyzeTextWithAI(userText, userName, userId);

    console.log("AI Analysis result:", analysis);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    const entryData = {
      userId,
      text: userText,
      sentiment: analysis.sentiment,
      category: selectedCategory || analysis.category,
      tags: analysis.tags,
      aiReply: analysis.reply,
      aiResponse: analysis.reply,
      aiSummary: analysis.summary,
      aiInsight: analysis.insight,
      isAchievement: analysis.isAchievement,
      mood: analysis.mood,
      media: uploadedMedia.length > 0 ? uploadedMedia : undefined,
      streakDay: 1, // TODO: Calculate actual streak
      focusArea: analysis.category
    };

    console.log("Creating entry in database with", uploadedMedia.length, "media files...");

    // Check if online
    if (!navigator.onLine) {
      console.log("App is offline, saving entry for later sync...");

      // Save offline
      const pendingEntry = await saveEntryOffline(userId, userText, {
        sentiment: analysis.sentiment,
        category: selectedCategory || analysis.category,
        mood: analysis.mood,
        media: uploadedMedia.length > 0 ? uploadedMedia : undefined,
        tags: analysis.tags,
      });

      console.log("Entry saved offline:", pendingEntry);

      // Show offline toast
      toast.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω", {
        description: "–ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        duration: 4000
      });

      // Callbacks with pending entry
      onMessageSent?.(userMessage);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º modal —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowSuccessModal(false);
      }, 2000);
    } else {
      // Save online
      const savedEntry = await createEntry(entryData);

      console.log("Entry saved successfully:", savedEntry);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID –∑–∞–ø–∏—Å–∏
      userMessage.entryId = savedEntry.id;

      // Callbacks
      onMessageSent?.(userMessage);
      onEntrySaved?.(savedEntry);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º modal —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setTimeout(() => {
        setShowSuccessModal(false);
      }, 2000);
    }

  } catch (error) {
    console.error("Error processing message:", error);

    // Error toast
    toast.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", {
      description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      duration: 4000
    });

    // ‚úÖ FIX #4: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º fallback –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
  } finally {
    setIsProcessing(false);
    clearMedia(); // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  }
}

