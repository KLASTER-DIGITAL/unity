import { transcribeAudio } from "@/shared/lib/api";
import { toast } from "sonner";
import { checkMicrophonePermission, triggerHapticFeedback } from "./PermissionUtils";

interface VoiceHandlerParams {
  isRecording: boolean;
  isVoiceSupported: boolean;
  stopRecording: () => Promise<Blob | null>;
  startRecording: () => Promise<void>;
  setIsTranscribing: (transcribing: boolean) => void;
  setInputText: (updater: (prev: string) => string) => void;
  setShowPermissionGuide: (type: 'microphone' | 'camera' | null) => void;
}

/**
 * Handle voice input - start/stop recording and transcribe
 */
export async function handleVoiceInput({
  isRecording,
  isVoiceSupported,
  stopRecording,
  startRecording,
  setIsTranscribing,
  setInputText,
  setShowPermissionGuide
}: VoiceHandlerParams) {
  if (!isVoiceSupported) {
    toast.error("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", {
      description: "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞"
    });
    return;
  }

  if (isRecording) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
    setIsTranscribing(true);
    
    try {
      const audioBlob = await stopRecording();
      
      if (!audioBlob) {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ");
        return;
      }

      console.log('Audio recorded, size:', audioBlob.size, 'type:', audioBlob.type);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
      toast.loading("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", { id: 'transcribing' });
      
      const transcribedText = await transcribeAudio(audioBlob);
      
      toast.success("–ì–æ—Ç–æ–≤–æ! ‚ú®", { id: 'transcribing' });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ input
      setInputText(prev => {
        const newText = prev ? `${prev} ${transcribedText}` : transcribedText;
        return newText;
      });

      // Haptic feedback
      triggerHapticFeedback([50, 100, 50]);

    } catch (error: any) {
      console.error('Transcription error:', error);

      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      let errorMessage = "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è";
      let errorDescription = error.message;

      if (error.message?.includes('OpenAI API key')) {
        errorMessage = "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        errorDescription = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      } else if (error.message?.includes('Transcription failed')) {
        errorMessage = "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è";
        errorDescription = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      } else if (error.message?.includes('No active session')) {
        errorMessage = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
        errorDescription = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.";
      }

      toast.error(errorMessage, {
        id: 'transcribing',
        description: errorDescription
      });
    } finally {
      setIsTranscribing(false);
    }
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ü–ï–†–ï–î –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏
    const permissionStatus = await checkMicrophonePermission();
    
    if (permissionStatus === 'denied') {
      // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–π–¥ —Å—Ä–∞–∑—É
      toast.info("–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", {
        description: "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
        duration: 6000,
        action: {
          label: "–ü–æ–º–æ—â—å",
          onClick: () => setShowPermissionGuide('microphone')
        }
      });
      return;
    }
    
    if (permissionStatus === 'prompt') {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      toast.info("üé§ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É", {
        description: "–ù–∞–∂–º–∏—Ç–µ '–†–∞–∑—Ä–µ—à–∏—Ç—å' –≤ –¥–∏–∞–ª–æ–≥–µ –±—Ä–∞—É–∑–µ—Ä–∞",
        duration: 3000
      });
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
    try {
      await startRecording();
      toast.success("–ì–æ–≤–æ—Ä–∏—Ç–µ...", { duration: 1000 });

      // Haptic feedback
      triggerHapticFeedback(50);
    } catch (error: any) {
      console.error('Recording error:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (error.message.includes('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω')) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        setShowPermissionGuide('microphone');
        toast.info("–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º", {
          description: "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
          duration: 5000
        });
      } else if (error.message.includes('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        toast.error("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", {
          description: "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
          duration: 5000
        });
      } else if (error.message.includes('–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º')) {
        toast.error("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–Ω—è—Ç", {
          description: "–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω",
          duration: 5000
        });
      } else {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", {
          description: error.message,
          duration: 5000
        });
      }
    }
  }
}

