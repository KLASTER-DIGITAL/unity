import { useState } from "react";
import { motion } from "motion/react";
import { Eye, EyeOff, Shield, ArrowLeft } from "lucide-react";
import { Button } from "@/shared/components/ui/button";
import { Input } from "@/shared/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/shared/components/ui/card";
import { toast } from "sonner";
import { createClient } from "@/utils/supabase/client";

interface AdminLoginScreenProps {
  onComplete: (userData: any) => void;
  onBack: () => void;
}

export function AdminLoginScreen({ onComplete, onBack }: AdminLoginScreenProps) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("üîê [AdminLoginScreen] handleLogin called");

    if (!email || !password) {
      toast.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    setIsLoading(true);
    console.log("üîê [AdminLoginScreen] Starting login process...");

    try {
      const supabase = createClient();
      console.log("üîê [AdminLoginScreen] Supabase client created");

      // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error("Sign in error:", error);
        toast.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        setIsLoading(false);
        return;
      }

      if (!data.session) {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
        setIsLoading(false);
        return;
      }

      console.log("üîê [AdminLoginScreen] Session created, fetching profile from DB...");

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î (–∫–∞–∫ PWA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
      // –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ Edge Function
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', data.user.id)
        .single();

      if (profileError) {
        console.error("Profile fetch error:", profileError);
        toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
        setIsLoading(false);
        return;
      }

      if (!profileData) {
        console.error("Profile not found for user:", data.user.id);
        toast.error("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        setIsLoading(false);
        return;
      }

      console.log("üîê [AdminLoginScreen] Profile loaded:", profileData.email, "role:", profileData.role);

      // üîí SECURITY: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ - —Ç–æ–ª—å–∫–æ super_admin –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (profileData.role !== 'super_admin') {
        toast.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", {
          description: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        });
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        await supabase.auth.signOut();
        setIsLoading(false);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º userData –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ
      const userData = {
        id: data.user.id,
        email: data.user.email,
        name: profileData.name,
        role: profileData.role,
        diaryData: {
          name: profileData.diary_name,
          emoji: profileData.diary_emoji
        },
        language: profileData.language,
        notificationSettings: profileData.notification_settings,
        createdAt: profileData.created_at,
        profile: {
          id: profileData.id,
          name: profileData.name,
          email: profileData.email,
          role: profileData.role,
          diaryName: profileData.diary_name,
          diaryEmoji: profileData.diary_emoji,
          language: profileData.language,
          notificationSettings: profileData.notification_settings,
          onboardingCompleted: profileData.onboarding_completed,
          createdAt: profileData.created_at
        }
      };

      console.log("üîê [AdminLoginScreen] Admin login successful:", userData.email, "role:", userData.role);
      toast.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

      // –í—ã–∑—ã–≤–∞–µ–º onComplete –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      console.log("üîê [AdminLoginScreen] Calling onComplete...");
      onComplete(userData);
      console.log("üîê [AdminLoginScreen] onComplete called");

    } catch (error) {
      console.error("Login error:", error);
      toast.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4 }}
        className="w-full max-w-md"
      >
        <Card className="shadow-lg">
          <CardHeader className="space-y-4 text-center pb-6">
            {/* Back Button */}
            <button
              onClick={onBack}
              className="absolute top-6 left-6 w-10 h-10 rounded-full bg-muted hover:bg-accent/10 flex items-center justify-center transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-foreground" />
            </button>

            {/* Logo */}
            <div className="flex justify-center">
              <div className="w-16 h-16 rounded-2xl bg-accent flex items-center justify-center">
                <Shield className="w-8 h-8 text-white" />
              </div>
            </div>

            <div className="space-y-2">
              <CardTitle className="text-foreground">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</CardTitle>
              <CardDescription>
                –í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
              </CardDescription>
            </div>
          </CardHeader>

          <CardContent>
            <form onSubmit={handleLogin} className="space-y-4">
              {/* Email Input */}
              <div className="space-y-2">
                <label htmlFor="admin-email" className="text-foreground">
                  Email
                </label>
                <Input
                  id="admin-email"
                  type="email"
                  placeholder="admin@example.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  disabled={isLoading}
                  className="h-12"
                  autoComplete="email"
                  required
                />
              </div>

              {/* Password Input */}
              <div className="space-y-2">
                <label htmlFor="admin-password" className="text-foreground">
                  –ü–∞—Ä–æ–ª—å
                </label>
                <div className="relative">
                  <Input
                    id="admin-password"
                    type={showPassword ? "text" : "password"}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    disabled={isLoading}
                    className="h-12 pr-12"
                    autoComplete="current-password"
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
                    tabIndex={-1}
                  >
                    {showPassword ? (
                      <EyeOff className="w-5 h-5" />
                    ) : (
                      <Eye className="w-5 h-5" />
                    )}
                  </button>
                </div>
              </div>

              {/* Login Button */}
              <Button
                type="submit"
                className="w-full h-12 bg-accent hover:bg-accent/90 text-white mt-6"
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    –í—Ö–æ–¥...
                  </div>
                ) : (
                  "–í–æ–π—Ç–∏"
                )}
              </Button>

              {/* Security Notice */}
              <div className="mt-6 p-4 bg-muted rounded-lg">
                <div className="flex items-start gap-3">
                  <Shield className="w-5 h-5 text-accent shrink-0 mt-0.5" />
                  <div className="text-muted-foreground">
                    <p className="mb-1">–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø</p>
                    <p>
                      –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é{" "}
                      <span className="text-foreground font-semibold">
                        super_admin
                      </span>
                    </p>
                  </div>
                </div>
              </div>
            </form>
          </CardContent>
        </Card>

        {/* Additional Info */}
        <div className="mt-6 text-center text-muted-foreground">
          <p>
            –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞?{" "}
            <button
              onClick={onBack}
              className="text-accent hover:underline font-semibold"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </p>
        </div>
      </motion.div>
    </div>
  );
}
